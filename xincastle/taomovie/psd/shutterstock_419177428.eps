%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: cinemaicons-02.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For:   
%%CreationDate: 5/6/2016
%%BoundingBox: 0 0 501 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.1 x35 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2016-05-06T17:23:01+06:00</xmp:CreateDate>
         <xmp:MetadataDate>2016-05-06T17:23:01+06:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-05-06T17:23:01+06:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>48</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAMAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A55+Xn5Wf4osp9UvL9bTT&#xA;LcOr+kPUm5qKiq9FHfxPhvXNVru0vBlwgXL7HKwabjFk7MUh8ualcR3zW0bSvYTpBJbhHExMnqbi&#xA;Olfh9I8gdx99M46iIq/4hfl0/W0eGd/JMNJ8l/XNZvtMvNRgsTY231l7hgXjYkxj0wfh+L9794yr&#xA;Jq6gJCJPEa+/9TOOKyQTVKX+EZZfOEXlq0u4p3mljijvKFYj6iK/IDc0Ab6cI1Q8HxCK57I8L18I&#xA;K9fIurSedW8pRPE98sxhMwJ9KirzLk0qBx36V7Y/nYDD4p+lfBPHwdWV6b5A1Pyd+a3kuC8mjuI7&#xA;rVrBoZoqgEpdRc1IboRyGR0WujqAaFEJzYDj59X29ma0uxVxIAJJoBuSelMVQFprMFxLEhjeIXIZ&#xA;rV3pSQLuaUJPTffMPFrIzIFEcX031bp4SBz5c17apbLsah/WEHp7cqlwnKlfs79cmdVD48VfbXyY&#xA;+EfstRn1oRarHp/1d250/ejpU+A7gV3Ndsqya3hzDHwnfr+PtZRw3AytVvdVgtLq1t5FYtdNwVh0&#xA;BqAK/SRlmfVxxzjAj6yiGIyBPcs1fWINOjHqA+pIrejtVarTr9+Q1utjgG/M8k4cJmdkehqinfcA&#xA;77HMyJ2ai3hQ7FXn3/OQH/kn/Mn/ABhi/wCoiPFXynrP5P6zpmiXWpyXMbm1t4rh4ABXk1fXTly/&#xA;3UBWv7XbNTh7XhOYjXMkfq+f2OVPSGMbYUtsDYPcdWDAbHoO9fwzOOb96IeTSIem3oHkH8nZ/Nfl&#xA;8a1FdOy+vJA1miqlDGFNTMxalQ4pSM5h6vtIYZ8FdOf7P2t2LT8YtjD+W7G385Xuh6jMbOK2nlhA&#xA;9RXaqMQqesUjUmn7XAV8BXLc2pmMAyQHEdv7a/awhjHHwk0v8m6DoeredrbSb2W5m0iRp/UlswBc&#xA;NHFC8gMSsHHI8OlMy4SkYgkUWogXtye4/kx5d8taJ+cdknl03rWF75dluXOoFDL6puvTbiUjhBjp&#xA;GvE8d8mCgvpXCh2KpFrvmy10m6Fs8TSOYmk2NBX9heh+149s1us7SjglwkWav9Tk4dMZi0q/MLzt&#xA;PofkGbzBp6N6rqghk4c1id/stICPs8hw+ZGXT1P7nxI9WAx+vhLJTqcQ02C+j/fRTIjo32aq61Dd&#xA;8Oq1XhY+OrRixccqXaffrd+pT9im1KUrXvXfpleh1oz35V+PxTLNh4KSfybrnmPVf0j+mtMGnfVp&#xA;/St6E/EBXkpqTy4bfvF+Fq7dMlo8+XJxeJHho7fj9PIozQjGuE2mkF5dveem/p+iXdVpXnRa07/f&#xA;mWCbaqfBHkrzJ5h0dr+LRrd7qS9h4MkaGRo2AYJMoCtR05nifc5i6vT48lcZqvxTbiySjdJfG+u6&#xA;pd3eniMz3t/cG6uYyoWRpoRIzH9njQO9RltY4AS5RiKHu2/YwuUiR1K/TvNmq2GqS6lB6f1iWIQO&#xA;pU+mVCqorGCFanAH4qiu9K4J6aMo8J5XaY5CDahNrN7d67+l5FEt20yz8KykFlIIAPP1KCm1G27Z&#xA;IYoxhwDlX48kGZMrVrHV9ci8yrqumo0WqvK08ccKux5SAswVWLsQVY/RkZ4oHHwS+lMZyErHNmWk&#xA;eZ/NnmD81fJdx5gRojHq9gtrF6TQxgG6i5lQ3Umgrvlej0+LECMfx6ssuSUj6n3FmY0uxVxAIoem&#xA;KoO10mztphLGGJUFYlZiyxqeoQHpmNi0kIS4hfl3D3NkspkKcf0dvbmdeTS+p6ZkHL1OfMCla/aH&#xA;TEnF9Ni+K6vrd/evq510VZjbpMkssojZQVUMVAPIjx37ZOZiJCRNIjZFALpbdZJYpCxBhJZQKUJI&#xA;471BPQ9slPGJEH+agSoEd6G1Oz0269JbxwpiPNAWC+x69so1WHFkoZDy35s8U5R+lGo6OiujBkYA&#xA;qwNQQehBzKBBFhqIbwq7FXn3/OQH/kn/ADJ/xhi/6iI8VfDJuroksZnJYuxJY1JlHGQ9f2xs3jke&#xA;AdybKMs7XVp7KZbeItbKC8hoADTrQnqdu2UZBjExI/U5eHTZskCYj0hNvLfnzz3oNg1loV/NbWTS&#xA;GQxxxo6+owAJqyN2AyGfTYJyuYF+9px5JxHpSe5vtXutQuNYuGklu2m9S5umWtJpCT8W3EEkGgy8&#xA;QhwiH8NcvJhZu+qyzn1DTL+3uoEMV3GVltjJGr7ndHCSKynxU09xk+IEMaL2z/nGvVdZ1P8AOK4u&#xA;NZkabUV0ueOaWVFWZuEkVDKwCs79uT1alBXYYwkCLHJSCDu+tMkh2KrTHGTUqCdjWgrt0+7BwhNp&#xA;R5m8s6F5j0z9C6she0lYS/V45GiLmM1/YKkgE1OV5McJDhLKMiNwr29no2naNb6eHRNOskS2i9WS&#xA;vERAIql2NagCm5yGTHilDhlRiP0JjKQlY5q9idLCyNZyRMooZTG4YDrSu5pg0+DFjvwwPNck5y+p&#xA;LND8zeVL3Vb7StJvEnvYSbm6SMs6kuQGZXNUahIB4nY5PHOFkR5827NpMsICcxUTsmkUmnG/lhil&#xA;Rr6NQ88Qesiq/wBksta0NNq5MSjxEXu41Gr6Pir8vfzF8naL5Xl0bzBps9+WuHmj4QwzRhXVR0ld&#xA;N6r4ZqddoM2TJx45CO3eR9zl4M8IxqQtKfIXmfy7pPnS91LUEMWkXCXCLAsfI8JXBSPipotB4eGX&#xA;6zTZJ4RGO8xX2NeHJETJPJU8iedPKvlo6jDqGjrrMc0oNrPIkRYRrUDaQGleuDWaTLmoxlwbb804&#xA;csYXYtuDz9oNv5j1bVrfSmgivfRFrDDwiaNI4+MsYdOJj9VgOTJvg/I5DjjAyvhu/idvfXmnx48R&#xA;IHNbcefNGm1nStSFlPC9l6qzMHDyiKSLgkSSMeTiMk8S+9NsY6GYjKNj1V7ufP4+SDmBINck20vz&#xA;Xp/mH8zvJUlpBJAY9ctnlRwqoPVvISFjClqKOOXaLSnFdm7r7GObKJ1T7czOaHYqsuI3kgkjRuDu&#xA;rKrjsSKA5GYsEBIO6RaZ5f1W2vre4n1BpYouXqRVchuSFRWp7E1zU6Xs/NjyCUp2B037nKy54SiQ&#xA;I07/AA7dHVfrbPH6YuPWFC3OnPkB0pg/k6fjeJYrivzT+YHBw+Sje+XNYk1G4uLS6W3jmkDgq7q3&#xA;QVrxHt45DUdnZ5ZjOEhEE95Tj1EBAAi0XreiahqNwnC8MVuKEIARwZdwwodzX7sv12hy5pgidR+7&#xA;zYYM8YDcbq+paVPdXMcqMoRE4kMTUmtd6A7ZbqtJLJIEHkGGLKIggo2wtja2NtbEgmCJIyR0+BQv&#xA;8My8GPgxxif4QB8mqcrkT3q+WsXYqwP89Xgj/KnXpLiL1rdEgaaEErzQXURZeQ3FRtXFXzHrH5ue&#xA;WNQ0e/00eWBEt1aNbRE3EjQxsok+rNFbkmKH6u8nJfTFTV/5jkeFNsP0vzFFFpElteD1RHRI4geJ&#xA;eM0BFQP2fxzDy6Ymdxd/o+1IxwGGTetgOVj9n2u8v+Z7bTbAW0iS8hKZCYwpDKQBxPLMXXdmyzZO&#xA;IEcq3t1eDUCEa81CPXo0tdW4qvq391FOsEsayoUX1uQJb7LAyrQjfMyOmI4B/NjV8u79TScnPzKn&#xA;qWsifVbG/hkHqW8VsCWjCIkkKgEBE24qRtTJQwfu5RPI8XXvQZ+oH3PYP+cb9SGo/nTfXYYMj6bO&#xA;IyFK/CHhC1B3rTrjosHhYhFc0+KRL6zzKanYqgrqwnnmLibitKKpUMAKbjfx8ciQm1rWEjS2vqEv&#xA;6KyAzByrgsVI6ddloa5VPFxSB7r/AEMoyoFj/m/yde655XuNItpY7eZ7r145JWdwVD8viYAtUj55&#xA;h59FKeIwG3qtuhmEZiXkhfJf5cnR7HXLHUvRez1ghfqtu8pVI+LKV5vxf9vrh0OhOISBqpd1sp6o&#xA;8UZR5xSz8uPy71by35i1C59b0tODvCkTIpa4jqxjk9TkzLSu6dDseuwu0+AwkT0dj2l2jDNiiK9X&#xA;3d4r9LKdO8sx2vnXU9dETr9ct44lkLqVLVBkog+IfYSlfA4MelEc8slcx/b+h1MstwEe58Y+S/KO&#xA;l6tpls8ljcajcXl49vczW8oiWwgjVCZpQVateZIrQfD45Tq9VOEjREajYsfUe4M8WISA2uz8lD8t&#xA;dK0a884vYX9t+k7URziJlqFqg+GQrUVBHQHuRktflnHDxRPCdkYIgzo7rvInlPy/5i1nVodRNzbW&#xA;9pG81tbWzxiY0egj/eq/Kg2wazU5MUI8NEnmT+xOHHGZNq03kLQW/Mqfyuuq/UtMjMfp3dyySSOX&#xA;jjb01KiNC7NJQdPpOxEdbk/LDKY3LfYe87qcMfE4b2QvmXy15TsfPdpo+n6g1xo8zwx3Nwro7xF5&#xA;DHIOQHGq05Gq5LT6jNLAZyjUxdeaMmOAmADsyq50HTPL/wCcvkbRNPlkmhs73TOTSlSeUl96h+yq&#xA;7nlyr707Y9m5pZYGcusl1MBEgDufaGbFx3Yq03LieFOVDxr0r2rgKsX0vU9Z/Tiw6gWJasTxxLWJ&#xA;WAqCan4QabHvmh02pzHU8OS+6hy/Z7+rn5McPDuKZtPd/wCIlgFwPq/pcjDQf08d8zjkn+a4eL08&#xA;PJo4R4V1vaCuvMGqRarJaxwxNEk8cQqr8yr0q2xptXMbN2hljm4ABw8QHW92yGCBhZO9K915gull&#xA;nWC25LEzIpLJQsjcSXPNfTB6DkPf2y3Nr5xkRGPL3d/XccPlfvYwwAgWfx8t0DrHme/jFqbWL0Vn&#xA;i9WsgDVapBSoqNqdvHMXXdp5ICJgKEhe/wBzbg00Td9GR2E809lBNNH6Uskas8f8pIqRm6wTM4CR&#xA;FEhwpxAkQFfLWLsVYD+fSK/5SeYUduKNHCGbwBuYqnATsofNmufld+Xllot/eWnmT17q2t5ZreH6&#xA;xbNzkRCyJRRU8iKbZo8PaOolMAwoEjoXOnp8YBIkxLT/AC3o03lz67I59cxs7TcqBGFdqdNqZHP2&#xA;hmjqeAD02Nu9MNPA47PNILS2ia3R/RM7u5VqMRwA77fPvmyzZSJEcXCAPm40ICuVsm8h6T5FvLy+&#xA;t/MU7rKrKthGJPSRx8XOr0py2UAV37VynVZs4hGUB03Z4oQsiSX+bdF0Sy80SWWmTMmnmOORRMSZ&#xA;EZ0BaNuSoahulR0yzDqMng8RFy8vvYzxx46B2en/APOMFvaw/mq6wNy/3GXIcVrQiWIZZpMs5gmQ&#xA;9zHLGIOz64zLanYqkGs65q9nemG1s/WiCgiTg7bnruu2ajW67NjycMIcQ9xcvDghKNk0xn8yPO/m&#xA;bRPLem3thCtvPdyslzM0fIRcd1Xi9QC/v4ZXq9fmhgjMDhlLn5MsWCBmRdgIe688+aT+W2l6wxSw&#xA;vr+9gs7nUmh9SOCCWUx/W/SJC06ddjX3GZGHU5JYIzOxJ5/pa544iZA5Jh5F8zazqT+YrKPU4/MM&#xA;WltEun6wsSRLM8yuzxH0gsLelRRVeta5bHLMxnwniI5MTGNi9mQ6Jf61LfPDfqvAITsvFgwIG4rW&#xA;hqco0WfPLIY5OVM82OAjcXnui/mT+ZerfmTFph8uyWGgxOYb2GaJzJGjqzxzyzAcVJEfw0+E9Kk0&#xA;OWw1GWWSuGosDjiI3e75T0Lyd5w1OwW70q2kazupjac1kVA7qhkYMCw+EKp3O3brlufV4cZqZ3At&#xA;jDFOQ2X+UPJ3mjXLm7XRmEE9lxS5ZpTCQZC1FqPeM4NVqsWMDj3B5dU4sUpE03pfkXXNU82P5e5x&#xA;pqC/HPLKx4AEBuRNORJ5jtXBPW44Yhk/hWOGRlw9VG38l6vNreoaRHJAt3pkck0xeVURlioTwY7E&#xA;mu34kZOWrgIRnvUtuSBiNkdypD5H1N/NT+XXuIBeRo0jzRuZYqLF6xoyAknj7dcjLWRGLxKNftpI&#xA;wni4WQaJ5V1Dy3+bvlC0vZ1uZJdVsJPWTnT4b4RFauFNQY/upktJqY5o3EVX9v6UZcZgaL7ozKan&#xA;Yq4kAVOwHU4qltnqujTXYS3kU3NyC3QgsIzTev4Zg4dXgnP0H1S/Q3TxTA35BXE9mdTMAjU3Ij9R&#xA;pKCoAoKV69Gy4ZIHLw16qu2PCeG+inPrEUN6LQwTMS6R+qqgxgvSlTX38MrnrBHJwcMuYF9N2Qwk&#xA;x4rDp9atILtrV1l9RWjWoQlSZelCMcmthCfAQb26d6xwki1DVNctLO5+rzwGQpGJ+Xw0359Knr+7&#xA;OV6vXQxS4ZC9r6ef6mWLCZCwU1R1dA6mqsKg+xzPBsW45DeFXYq8+/5yA/8AJP8AmT/jDF/1ER4q&#xA;+PJvIWuWXli517ULR4rXjbmzkWSMqwnYH1CAWJXjtQUNWB6A5hDWwlkGOJ33v4fj7G44ZCPEQj/+&#xA;VTeZx5QPmb6xa/o8WwvGg9SX1eBUNSnp+ny4sDTnmXYtqSTRfKPmDVrRrrT4w0AJRiZFTdRU7Ejx&#xA;zE1Gtw45cM+fubceGchYX+W/I/mHzH5l/wAOaXCj6oGdZEeREVfSNJGLE7hf8mpzKjkEoiQ5FqMS&#xA;DShbeVNauNZutGWJI9RshKbmKSWNFQw/3gMhb0xx71amRy5o4xcuSYwMjQexf84z+X9S0j80Fa99&#xA;L/SdMuzGYZorgfu5olarxM61De+DDnjO+Hp5EfemcDHm+ssuYOxVA6prFnp8Z9aQLKylokIPxEdq&#xA;geOYuq1kMI9R3rZtxYZTOy+e7t1t4vWX1lmUHZRxPTejHxIy4SBiL3tgRuo6lq+lWelfXL7aycAF&#xA;SnOoYdCoByObPDHHilyTCBkaHNR8t6voF/aNFoqrHbW1B6KRGFV5E04rRR+yemQ02px5R6OQTkxy&#xA;j9SY215b3PP0m5cDRtiP15kA210hIdY02SVDGHEk7CMP6TqCRWgLkcT375iQ1uORFXua5H7+TacM&#xA;g+MdJh/PnSNKj0vTtA1mCyiRkijGmTtxLSmVnBaI/ESSPl9+DL2fhySMpCyf1UmOonEUC7Q7P85d&#xA;H1DUr638nahNLqsonukn0u7ePmHZxxUKOjSHrjl0MJxjE2BEUKWOeUST3pfP5X/NifzGNek8o6ul&#xA;3zRykNjfRr8ChAAyrzAKrv8AFXLY6eIx+GOTE5CZcSJ8o6R+cHlXVZtT0/yhqc1xPG0UgudOvXUh&#xA;mDE/CEatV8chqtHDNERlYA7k4sxgbCL1pPzt1bXrTXJPKWo219ZAiD0NLuwlG68hIslfvyvD2djh&#xA;AwFkSZT1EpSB7k40uy/NPXvzD8nXur+U9RsbbTtUs5J5RY3iQqBcxGSZzKrBAEjWu9BSuWaXRxw3&#xA;XVjlzGfN9h5ltTsVWTwpNDJC9eEqlGp1owocjOIkCD1SDRtAQeXtJguI7iKHjLE3KNqk0+HjTfMP&#xA;H2dhhISiNw3S1EyKJVf0YP0r+kfUIbh6fpgChHufnk/yv77xb6VTHxfRwul0yKW7+ss24ZW4U2JT&#xA;oT3r8vxwz0olPj932KMpEaQd95V069vJbqZ5ecxUuisoX4VC7fDXovjmNqOysWWZnIys/jubMeql&#xA;CNCla68v2NwkKksjW8axRuCD8KUoCCCD0y3N2fjyADccIoMYaiUSfNH21vHbW8dvEKRxKEUewFMy&#xA;8WMQiIjkA1SkSbKpk2LsVYN+eGnahqX5V+YLLTrWW9vZoohDbW8bSyuRPGSFRAWOwrsMVfMOsW35&#xA;qal5G07yq3knWYxYshe8+p3R9RIwwRPT9EcaBh+0emYGLQCGeWW+fRvlnJgI9yeeXPM3506P5Qk8&#xA;sv5I1a5hW2ktbK7NpfrJGJFlVeauksbrGZqqoVfsqCSFAzNMWm2NeXdF/MjR9ONk/kTVroeoZUka&#xA;yuVKsRTp6DVpv129swNVoPFnxcVbV+N2/Fn4RVWq+TtG/MbQfPa+aZfJmvOFkuJvq1vaXcLcp1cA&#xA;eoIvsqX3FN+mZmPHwwEe4ANMpWSULpnlz8yNN8x3+rw+S9bnjvPrKLHNZ3fqBbgk1aT0jyYA7mm5&#xA;yGoweJGrre2WOfCber/kdb+dbj8yo77XPLeo6RBDp94jXd7BcKsks80UlOcscag7Gi+GR02mGK6P&#xA;NOTJxPo7MpqdiqV65oUeqiANL6RhYmvHlUNSo6inTMDXaEajhs1wt+DP4d+aLvbGK6jVGJTj9kqB&#xA;tUU7jM4xabS/V/Liajop0z1zCCxb1VU969gy/wA3jmPqdN4sOG6bMeThlbXlvy42jfWS9215JckM&#xA;8jLx3BZunJhuX7UyGk0ng3Z4ifx+lOXLx1tSZWdq1v6tSp9Ry/winXMsBqKX23l1YJIX9fl6Th/s&#xA;AE8eVBWv+Wc12Ps4RIN8jfL3/rciWosHZ//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>499.999989</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:a77ee886-834d-ce47-8277-b4a145c4903f</stRef:instanceID>
            <stRef:documentID>xmp.did:a77ee886-834d-ce47-8277-b4a145c4903f</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:fc7a662f-eba2-a646-8072-9de499c23776</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:a5c21a76-8ca6-8f42-833a-3036ba18e7ac</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:a5c21a76-8ca6-8f42-833a-3036ba18e7ac</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:fc7a662f-eba2-a646-8072-9de499c23776</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fc7a662f-eba2-a646-8072-9de499c23776</stEvt:instanceID>
                  <stEvt:when>2016-02-04T17:14:54+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a77ee886-834d-ce47-8277-b4a145c4903f</stEvt:instanceID>
                  <stEvt:when>2016-05-06T17:22:53+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a5c21a76-8ca6-8f42-833a-3036ba18e7ac</stEvt:instanceID>
                  <stEvt:when>2016-05-06T17:23:01+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
0 500 mo
500 500 li
500 0 li
0 0 li
0 500 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
448.912 56.083 mo
448.063 58.1335 li
449.324 58.1335 li
449.913 58.1335 450.395 58.6151 450.395 59.2064 cv
450.395 60.0886 li
459.84 60.0886 li
460.597 60.0886 461.213 60.707 461.213 61.4624 cv
461.213 64.7423 li
461.213 65.4976 460.597 66.1136 459.84 66.1136 cv
413.507 66.1136 li
412.75 66.1136 412.133 65.4976 412.133 64.7423 cv
412.133 61.4624 li
412.133 60.707 412.75 60.0886 413.507 60.0886 cv
440.001 60.0886 li
440.001 59.2064 li
440.001 58.6151 440.483 58.1335 441.072 58.1335 cv
442.376 58.1335 li
444.054 54.0787 li
448.912 56.083 li
cp
451.78 49.1538 mo
449.977 53.5091 li
445.12 51.5026 li
446.922 47.1471 li
451.78 49.1538 li
451.78 49.1538 li
cp
454.649 42.2199 mo
452.846 46.5777 li
447.991 44.5736 li
449.793 40.2158 li
454.649 42.2199 li
454.649 42.2199 li
cp
457.517 35.2933 mo
455.714 39.6486 li
450.859 37.6421 li
452.664 33.2843 li
457.517 35.2933 li
457.517 35.2933 li
cp
456.055 26.7194 mo
459.756 28.2495 li
460.073 28.3839 460.227 28.7506 460.094 29.0657 cv
458.583 32.7173 li
453.727 30.713 li
455.242 27.0568 li
455.372 26.7389 455.738 26.5874 456.055 26.7194 cv
456.055 26.7194 li
cp
415.771 67.184 mo
429.706 67.184 443.641 67.184 457.576 67.184 cv
458.081 67.184 458.487 67.6409 458.374 68.1297 cv
449.017 108.883 li
448.752 110.046 447.817 110.906 446.621 110.906 cv
439.991 110.906 433.356 110.906 426.724 110.906 cv
425.531 110.906 424.594 110.046 424.331 108.883 cv
414.972 68.1297 li
414.861 67.6385 415.266 67.184 415.771 67.184 cv
415.771 67.184 li
cp
level3{
gsave
[71.3403 0 0 71.3403 475.678 64.0672 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.811765 .635294 .164706 ]
/C1 [.831373 .65098 .164706 ]
/N 4.97729 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.811765 .635294 .164706 ]
/C1 [.913725 .760784 .34902 ]
/N 1.40048 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.913725 .760784 .34902 ]
/C1 [.760784 .607843 .196078 ]
/N 4.97729 
>>
]
/Bounds [.0416048 .454681 ]
/Encode [1 0 0 1 0 1 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[71.3403 0 0 71.3403 475.678 64.0672 ]ct
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~eC)^icd0q`cd0q`cd0q`cd0q`cd:%cd*U.ddF$@hdF$CjdaHRme'ldpeC<!te^`4#e^i=&f%8O*f@\a.
f\+s2g=k97gY:K;gt^]@h;-oDhVR/Ihr*GNiSibSio8tXj5]4]jQ5Lbk2tghkND'mkih6okih6okih6o
kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okND$kkND$k
kND!ik2tggjlPUcjlGL`jQ#:\j5T(XiSi_Qi8<GKhVI#CgtUT;g"G$0f%/C$e'cXkd*L"^bK@rJa2Q!7
~>
<~VPKu]U8"BVU8"BVU8"BVU8"BVUSFTZUSFW\Unjf_V5:#cVP^5gVl-GkW2QYoWMuntWiE,#X/rD(Xf\_-
Y-+q2YHP17Yd(I<ZEggCZa@*H[C*EN[^W`T\@B&Z\[oA`]=Y_g]Y2"m^:q@s^qdb%_83t(_83t(_83t(
_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(^qdb$^qdb$
^qd_"^V@Ou^:q=q^:h4n]tD"j]Xtef]"5G_\[]/Y\$i`Q[C!<IZEga>YHP+2XK/A$WMl_lUnaZXTUq^E
~>
<~.Olnt.Olnt.Olnt.Olnt.Olr!.k</%/1`A)/M8Y./h\k30JG490etL>1G^jE1c7-K2E*QR3&ioY3]]>a
4?P_h4[)%o5<qJ"5sdn*6psI47Rfm<84Z<D8kVfN9MJ5V:JXe`;,U:j;cHas<`W:(=BJ[-=BJ[-=BJ[-
=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-=BJ[-='&I)='&I)
='&F'<`W7%<E3%!<E)ps<)Z^o;c6Lk;,L.d:esk^:/+GV9M8#N8P)HC7Rfg76UF()5X.Fq4$#A]2`3EJ
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
419.15 325.531 mo
421.88 329.327 425.811 332.2 430.389 333.592 cv
430.88 333.199 431.326 332.736 431.712 332.205 cv
432.084 331.693 432.376 331.151 432.597 330.588 cv
427.833 329.491 423.788 326.514 421.287 322.478 cv
420.846 322.85 420.442 323.276 420.092 323.761 cv
419.688 324.318 419.374 324.915 419.15 325.531 cv
cp
419.192 300.311 mo
416.62 303.86 415.102 308.228 415.102 312.948 cv
415.102 313.09 415.103 313.226 415.107 313.366 cv
415.681 313.768 416.324 314.093 417.026 314.323 cv
417.565 314.5 418.112 314.607 418.656 314.653 cv
418.603 314.091 418.574 313.525 418.574 312.948 cv
418.574 308.501 420.18 304.428 422.844 301.277 cv
422.415 301.028 421.952 300.82 421.464 300.663 cv
420.709 300.418 419.943 300.305 419.192 300.311 cv
419.192 300.311 li
cp
443.458 292.466 mo
441.323 291.76 439.044 291.378 436.674 291.378 cv
434.304 291.378 432.023 291.76 429.89 292.466 cv
429.632 293.207 429.492 294.003 429.492 294.831 cv
429.492 295.322 429.541 295.803 429.637 296.271 cv
431.799 295.355 434.179 294.85 436.674 294.85 cv
439.17 294.85 441.549 295.355 443.71 296.271 cv
443.807 295.803 443.855 295.322 443.855 294.831 cv
443.855 294.003 443.714 293.207 443.458 292.466 cv
443.458 292.466 li
cp
458.241 313.366 mo
458.243 313.226 458.246 313.09 458.246 312.948 cv
458.246 308.228 456.728 303.86 454.156 300.311 cv
453.405 300.305 452.639 300.418 451.884 300.663 cv
451.394 300.82 450.934 301.028 450.504 301.277 cv
453.168 304.428 454.774 308.501 454.774 312.948 cv
454.774 313.525 454.745 314.091 454.692 314.653 cv
455.236 314.607 455.783 314.5 456.322 314.323 cv
457.024 314.093 457.668 313.768 458.241 313.366 cv
458.241 313.366 li
cp
422.811 321.499 mo
425.039 325.194 428.698 327.924 433.024 328.922 cv
433.224 327.401 432.931 325.85 432.188 324.506 cv
430.259 323.743 428.572 322.502 427.272 320.931 cv
425.762 320.638 424.194 320.839 422.811 321.499 cv
422.811 321.499 li
cp
424.457 302.551 mo
421.989 305.39 420.495 309.098 420.495 313.156 cv
420.495 313.628 420.517 314.093 420.557 314.554 cv
422.064 314.273 423.449 313.517 424.498 312.391 cv
424.629 310.276 425.299 308.305 426.374 306.616 cv
426.186 305.09 425.509 303.661 424.457 302.551 cv
424.457 302.551 li
cp
442.988 298.257 mo
441.046 297.433 438.915 296.979 436.674 296.979 cv
434.433 296.979 432.3 297.433 430.36 298.257 cv
431.092 299.601 432.242 300.687 433.634 301.338 cv
434.608 301.089 435.625 300.956 436.674 300.956 cv
437.723 300.956 438.74 301.089 439.714 301.338 cv
441.106 300.687 442.256 299.601 442.988 298.257 cv
442.988 298.257 li
cp
452.791 314.554 mo
452.832 314.093 452.852 313.628 452.852 313.156 cv
452.852 309.098 451.359 305.39 448.891 302.551 cv
447.838 303.661 447.163 305.09 446.974 306.616 cv
448.047 308.305 448.717 310.276 448.85 312.391 cv
449.899 313.517 451.284 314.273 452.791 314.554 cv
452.791 314.554 li
cp
440.325 328.922 mo
440.125 327.401 440.418 325.85 441.16 324.506 cv
443.089 323.743 444.776 322.502 446.075 320.931 cv
447.586 320.638 449.154 320.839 450.537 321.499 cv
448.309 325.194 444.648 327.924 440.325 328.922 cv
440.325 328.922 li
cp
436.674 316.687 mo
438.624 316.687 440.206 315.107 440.206 313.156 cv
440.206 311.207 438.624 309.625 436.674 309.625 cv
434.723 309.625 433.142 311.207 433.142 313.156 cv
433.142 315.107 434.723 316.687 436.674 316.687 cv
436.674 316.687 li
cp
436.674 303.622 mo
441.531 303.622 445.467 299.686 445.467 294.831 cv
445.467 289.973 441.531 286.037 436.674 286.037 cv
431.817 286.037 427.881 289.973 427.881 294.831 cv
427.881 299.686 431.817 303.622 436.674 303.622 cv
436.674 303.622 li
cp
427.607 310.21 mo
429.109 305.591 426.579 300.63 421.962 299.131 cv
417.341 297.63 412.383 300.156 410.881 304.776 cv
409.381 309.395 411.908 314.356 416.528 315.855 cv
421.146 317.356 426.106 314.828 427.607 310.21 cv
427.607 310.21 li
cp
431.07 320.87 mo
435 323.724 435.869 329.224 433.016 333.151 cv
430.162 337.08 424.663 337.95 420.733 335.098 cv
416.805 332.242 415.934 326.744 418.789 322.815 cv
421.642 318.886 427.14 318.014 431.07 320.87 cv
431.07 320.87 li
cp
445.742 310.21 mo
447.242 314.828 452.202 317.356 456.821 315.855 cv
461.438 314.356 463.965 309.395 462.465 304.776 cv
460.965 300.156 456.007 297.63 451.386 299.131 cv
446.767 300.63 444.239 305.591 445.742 310.21 cv
445.742 310.21 li
cp
442.278 320.87 mo
446.206 318.014 451.705 318.886 454.559 322.815 cv
457.414 326.744 456.543 332.242 452.613 335.098 cv
448.685 337.95 443.187 337.08 440.332 333.151 cv
437.479 329.224 438.348 323.724 442.278 320.87 cv
442.278 320.87 li
cp
436.674 344.831 mo
419.181 344.831 404.997 330.649 404.997 313.156 cv
404.997 295.663 419.181 281.481 436.674 281.481 cv
454.167 281.481 468.349 295.663 468.349 313.156 cv
468.349 330.649 454.167 344.831 436.674 344.831 cv
436.674 344.831 li
cp
423.377 292.984 mo
423.716 291.944 423.148 290.827 422.107 290.489 cv
421.068 290.152 419.951 290.72 419.614 291.758 cv
419.275 292.798 419.843 293.917 420.883 294.256 cv
421.923 294.592 423.04 294.022 423.377 292.984 cv
423.377 292.984 li
cp
413.379 319.567 mo
412.495 318.925 411.257 319.122 410.614 320.004 cv
409.971 320.89 410.167 322.128 411.051 322.769 cv
411.935 323.413 413.175 323.217 413.818 322.334 cv
414.459 321.449 414.264 320.21 413.379 319.567 cv
413.379 319.567 li
cp
459.289 321.661 mo
459.626 322.701 460.743 323.271 461.782 322.933 cv
462.823 322.596 463.392 321.477 463.054 320.439 cv
462.715 319.399 461.6 318.829 460.56 319.168 cv
459.518 319.506 458.95 320.621 459.289 321.661 cv
459.289 321.661 li
cp
435.573 337.292 mo
434.689 337.937 434.493 339.173 435.134 340.058 cv
435.777 340.941 437.016 341.138 437.901 340.493 cv
438.785 339.853 438.982 338.614 438.337 337.731 cv
437.696 336.846 436.458 336.649 435.573 337.292 cv
435.573 337.292 li
cp
451.751 294.278 mo
452.845 294.278 453.731 293.391 453.731 292.298 cv
453.731 291.203 452.845 290.318 451.751 290.318 cv
450.657 290.318 449.771 291.203 449.771 292.298 cv
449.771 293.391 450.657 294.278 451.751 294.278 cv
451.751 294.278 li
cp
442.958 333.592 mo
447.534 332.2 451.468 329.327 454.197 325.531 cv
453.975 324.915 453.66 324.318 453.257 323.761 cv
452.904 323.276 452.502 322.85 452.061 322.478 cv
449.56 326.512 445.515 329.491 440.75 330.588 cv
440.97 331.151 441.264 331.693 441.635 332.205 cv
442.023 332.736 442.467 333.199 442.958 333.592 cv
442.958 333.592 li
cp
level3{
gsave
[71.5061 0 0 71.5061 469.898 296.863 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[71.5061 0 0 71.5061 469.898 296.863 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
135.819 187.392 mo
135.262 187.392 134.807 187.847 134.807 188.405 cv
134.807 195.484 li
134.807 196.038 135.262 196.493 135.819 196.493 cv
142.898 196.493 li
143.456 196.493 143.909 196.038 143.909 195.484 cv
143.909 188.405 li
143.909 187.847 143.456 187.392 142.898 187.392 cv
135.819 187.392 li
cp
135.819 171.212 mo
135.262 171.212 134.807 171.665 134.807 172.221 cv
134.807 179.301 li
134.807 179.858 135.262 180.314 135.819 180.314 cv
142.898 180.314 li
143.456 180.314 143.909 179.858 143.909 179.301 cv
143.909 172.221 li
143.909 171.665 143.456 171.212 142.898 171.212 cv
135.819 171.212 li
135.819 171.212 li
cp
135.819 203.573 mo
135.262 203.573 134.807 204.027 134.807 204.586 cv
134.807 211.666 li
134.807 212.222 135.262 212.677 135.819 212.677 cv
142.898 212.677 li
143.456 212.677 143.909 212.222 143.909 211.666 cv
143.909 204.586 li
143.909 204.027 143.456 203.573 142.898 203.573 cv
135.819 203.573 li
135.819 203.573 li
cp
181.62 196.495 mo
182.176 196.495 182.63 196.04 182.63 195.484 cv
182.63 188.405 li
182.63 187.847 182.176 187.393 181.62 187.393 cv
174.54 187.393 li
173.983 187.393 173.528 187.847 173.528 188.405 cv
173.528 195.484 li
173.528 196.04 173.983 196.495 174.54 196.495 cv
181.62 196.495 li
181.62 196.495 li
cp
181.62 212.677 mo
182.176 212.677 182.63 212.222 182.63 211.666 cv
182.63 204.586 li
182.63 204.029 182.176 203.573 181.62 203.573 cv
174.54 203.573 li
173.983 203.573 173.528 204.029 173.528 204.586 cv
173.528 211.666 li
173.528 212.222 173.983 212.677 174.54 212.677 cv
181.62 212.677 li
181.62 212.677 li
cp
181.62 180.314 mo
182.176 180.314 182.63 179.858 182.63 179.301 cv
182.63 172.221 li
182.63 171.667 182.176 171.212 181.62 171.212 cv
174.54 171.212 li
173.983 171.212 173.528 171.667 173.528 172.221 cv
173.528 179.301 li
173.528 179.858 173.983 180.314 174.54 180.314 cv
181.62 180.314 li
181.62 180.314 li
cp
159.259 180.883 mo
159.034 180.445 158.405 180.445 158.182 180.883 cv
154.895 187.35 li
154.804 187.527 154.648 187.641 154.451 187.672 cv
147.285 188.801 li
146.794 188.878 146.602 189.474 146.952 189.824 cv
152.088 194.948 li
152.227 195.088 152.287 195.272 152.257 195.47 cv
151.114 202.633 li
151.037 203.122 151.544 203.491 151.984 203.267 cv
158.444 199.967 li
158.623 199.874 158.817 199.874 158.992 199.967 cv
165.454 203.267 li
165.895 203.491 166.4 203.122 166.323 202.633 cv
165.183 195.47 li
165.151 195.272 165.211 195.09 165.353 194.948 cv
170.486 189.824 li
170.836 189.474 170.642 188.878 170.153 188.801 cv
162.989 187.672 li
162.79 187.641 162.636 187.527 162.543 187.35 cv
159.259 180.883 li
159.259 180.883 li
cp
133.217 164.203 mo
184.219 164.203 li
185.729 164.203 186.966 165.438 186.966 166.947 cv
186.966 216.938 li
186.966 218.449 185.729 219.682 184.219 219.682 cv
133.217 219.682 li
131.708 219.682 130.473 218.449 130.473 216.938 cv
130.473 166.947 li
130.473 165.438 131.708 164.203 133.217 164.203 cv
133.217 164.203 li
cp
level3{
gsave
[75.4714 0 0 75.4714 190.512 176.376 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[75.4714 0 0 75.4714 190.512 176.376 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
158.721 273.145 mo
154.082 282.27 li
153.476 283.462 152.363 284.27 151.042 284.482 cv
140.93 286.071 li
148.176 293.302 li
149.12 294.244 149.547 295.556 149.337 296.875 cv
147.725 306.983 li
156.841 302.327 li
158.032 301.72 159.407 301.72 160.598 302.327 cv
169.712 306.983 li
168.102 296.875 li
167.892 295.556 168.319 294.244 169.264 293.302 cv
176.508 286.071 li
166.399 284.482 li
165.078 284.27 163.963 283.462 163.358 282.27 cv
158.721 273.145 li
cp
159.191 281.172 mo
158.996 280.786 158.443 280.786 158.248 281.172 cv
155.365 286.844 li
155.285 287 155.147 287.099 154.976 287.126 cv
148.688 288.118 li
148.261 288.184 148.09 288.707 148.397 289.013 cv
152.901 293.507 li
153.025 293.633 153.079 293.793 153.049 293.969 cv
152.047 300.25 li
151.983 300.679 152.425 301.001 152.812 300.805 cv
158.476 297.912 li
158.633 297.831 158.806 297.831 158.961 297.912 cv
164.627 300.805 li
165.013 301.001 165.456 300.679 165.392 300.25 cv
164.391 293.969 li
164.36 293.795 164.414 293.633 164.538 293.509 cv
169.041 289.013 li
169.348 288.707 169.178 288.184 168.751 288.118 cv
162.465 287.126 li
162.291 287.099 162.154 287 162.074 286.844 cv
159.191 281.172 li
159.191 281.172 li
cp
151.578 328.708 mo
165.86 328.708 li
166.399 328.708 166.84 329.15 166.84 329.685 cv
166.84 334.336 li
166.84 334.875 166.399 335.315 165.86 335.315 cv
151.578 335.315 li
151.04 335.315 150.599 334.875 150.599 334.336 cv
150.599 329.685 li
150.599 329.148 151.04 328.708 151.578 328.708 cv
151.578 328.708 li
cp
147.207 325.25 mo
146.557 325.25 146.025 325.782 146.025 326.434 cv
146.025 338.162 li
146.025 338.489 146.292 338.757 146.623 338.757 cv
170.816 338.757 li
171.144 338.757 171.411 338.489 171.411 338.162 cv
171.411 326.434 li
171.411 325.782 170.882 325.25 170.23 325.25 cv
164.853 325.25 li
162.581 308.694 li
158.719 306.721 li
154.861 308.692 li
152.59 325.25 li
147.207 325.25 li
147.207 325.25 li
cp
142.953 340.153 mo
174.485 340.153 li
176.031 340.153 177.292 341.413 177.292 342.96 cv
177.292 344.651 li
177.292 345.037 176.978 345.352 176.592 345.352 cv
140.846 345.352 li
140.461 345.352 140.144 345.037 140.144 344.651 cv
140.144 342.96 li
140.144 341.413 141.408 340.153 142.953 340.153 cv
142.953 340.153 li
cp
159.746 268.589 mo
166.014 280.922 li
166.187 281.257 166.485 281.476 166.86 281.535 cv
180.526 283.686 li
181.457 283.834 181.827 284.971 181.161 285.64 cv
171.37 295.412 li
171.1 295.68 170.984 296.03 171.045 296.409 cv
173.223 310.067 li
173.368 310.998 172.402 311.702 171.562 311.273 cv
159.242 304.981 li
158.903 304.807 158.536 304.809 158.196 304.981 cv
145.876 311.273 li
145.037 311.702 144.07 310.998 144.217 310.067 cv
146.393 296.406 li
146.455 296.027 146.34 295.678 146.07 295.412 cv
136.279 285.64 li
135.612 284.971 135.982 283.834 136.913 283.686 cv
150.577 281.535 li
150.956 281.476 151.254 281.257 151.425 280.922 cv
157.694 268.589 li
158.118 267.75 159.321 267.75 159.746 268.589 cv
159.746 268.589 li
cp
level3{
gsave
[73.631 0 0 73.631 185.312 281.775 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[73.631 0 0 73.631 185.312 281.775 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
420.627 174.178 mo
419.95 174.176 419.397 174.73 419.397 175.409 cv
419.397 208.477 li
419.397 209.155 419.95 209.711 420.627 209.708 cv
452.719 209.708 li
453.397 209.708 453.952 209.157 453.951 208.477 cv
453.952 175.409 li
453.952 174.73 453.397 174.176 452.719 174.178 cv
420.627 174.178 li
cp
460.787 214.03 mo
461.466 214.03 462.017 213.478 462.017 212.797 cv
462.019 209.557 li
462.017 208.878 461.466 208.326 460.786 208.324 cv
457.546 208.326 li
456.869 208.326 456.315 208.878 456.315 209.557 cv
456.315 212.797 li
456.315 213.478 456.869 214.03 457.546 214.03 cv
460.787 214.03 li
460.787 214.03 li
cp
460.787 204.413 mo
461.466 204.413 462.017 203.86 462.017 203.18 cv
462.017 199.941 li
462.019 199.262 461.466 198.708 460.786 198.71 cv
457.546 198.708 li
456.869 198.71 456.315 199.264 456.315 199.941 cv
456.315 203.18 li
456.315 203.86 456.869 204.413 457.546 204.413 cv
460.787 204.413 li
460.787 204.413 li
cp
460.786 194.797 mo
461.466 194.797 462.017 194.243 462.019 193.564 cv
462.019 190.323 li
462.017 189.645 461.466 189.094 460.786 189.094 cv
457.546 189.092 li
456.869 189.094 456.315 189.645 456.315 190.325 cv
456.315 193.564 li
456.315 194.245 456.869 194.797 457.546 194.797 cv
460.786 194.797 li
460.786 194.797 li
cp
460.786 185.181 mo
461.466 185.181 462.017 184.627 462.017 183.948 cv
462.019 180.708 li
462.017 180.029 461.466 179.475 460.786 179.475 cv
457.546 179.475 li
456.869 179.475 456.315 180.029 456.315 180.706 cv
456.315 183.948 li
456.315 184.627 456.869 185.181 457.546 185.181 cv
460.786 185.181 li
460.786 185.181 li
cp
460.787 175.564 mo
461.466 175.564 462.017 175.011 462.017 174.331 cv
462.019 171.092 li
462.017 170.413 461.466 169.859 460.786 169.859 cv
457.546 169.859 li
456.869 169.859 456.315 170.413 456.315 171.092 cv
456.315 174.333 li
456.315 175.011 456.869 175.564 457.546 175.564 cv
460.787 175.564 li
460.787 175.564 li
cp
412.56 169.857 mo
411.882 169.857 411.329 170.411 411.329 171.09 cv
411.329 174.329 li
411.329 175.009 411.882 175.562 412.562 175.562 cv
415.8 175.562 li
416.48 175.562 417.033 175.009 417.033 174.329 cv
417.033 171.09 li
417.033 170.409 416.48 169.857 415.8 169.857 cv
412.56 169.857 li
412.56 169.857 li
cp
412.56 179.473 mo
411.882 179.472 411.329 180.027 411.329 180.706 cv
411.329 183.948 li
411.329 184.625 411.882 185.179 412.562 185.179 cv
415.8 185.179 li
416.48 185.177 417.033 184.623 417.033 183.948 cv
417.033 180.706 li
417.033 180.027 416.48 179.473 415.8 179.473 cv
412.56 179.473 li
412.56 179.473 li
cp
412.56 189.09 mo
411.882 189.09 411.329 189.642 411.329 190.323 cv
411.329 193.564 li
411.329 194.241 411.882 194.795 412.562 194.795 cv
415.8 194.795 li
416.478 194.795 417.033 194.241 417.033 193.564 cv
417.033 190.323 li
417.033 189.642 416.48 189.09 415.8 189.09 cv
412.56 189.09 li
412.56 189.09 li
cp
412.562 198.706 mo
411.882 198.706 411.329 199.26 411.329 199.939 cv
411.329 203.179 li
411.329 203.858 411.882 204.411 412.56 204.411 cv
415.8 204.411 li
416.478 204.41 417.032 203.858 417.033 203.18 cv
417.033 199.939 li
417.033 199.26 416.48 198.706 415.8 198.706 cv
412.562 198.706 li
412.562 198.706 li
cp
412.56 208.322 mo
411.882 208.322 411.329 208.876 411.329 209.555 cv
411.329 212.797 li
411.329 213.474 411.882 214.028 412.562 214.028 cv
415.8 214.028 li
416.48 214.028 417.033 213.474 417.033 212.797 cv
417.033 209.555 li
417.033 208.876 416.478 208.322 415.8 208.322 cv
412.56 208.322 li
412.56 208.322 li
cp
431.593 180.926 mo
430.3 180.123 428.54 180.95 428.54 182.359 cv
428.54 201.527 li
428.54 202.937 430.302 203.764 431.593 202.961 cv
447.03 193.376 li
448.148 192.685 448.148 191.202 447.03 190.511 cv
431.593 180.926 li
431.593 180.926 li
cp
409.58 163.094 mo
410.713 163.091 li
411.053 163.091 411.329 163.37 411.329 163.708 cv
411.329 164.713 li
411.329 165.392 411.882 165.944 412.562 165.946 cv
415.8 165.944 li
416.48 165.944 417.033 165.392 417.033 164.713 cv
417.033 163.708 li
417.033 163.37 417.31 163.094 417.648 163.094 cv
418.78 163.091 li
419.118 163.094 419.397 163.37 419.397 163.708 cv
419.397 165.445 li
419.396 166.127 419.95 166.679 420.629 166.679 cv
452.719 166.679 li
453.397 166.679 453.951 166.127 453.952 165.445 cv
453.952 163.708 li
453.952 163.37 454.228 163.094 454.568 163.091 cv
455.698 163.094 li
456.037 163.094 456.315 163.37 456.315 163.708 cv
456.315 164.717 li
456.315 165.394 456.869 165.948 457.546 165.948 cv
460.787 165.948 li
461.466 165.948 462.019 165.394 462.017 164.717 cv
462.019 163.708 li
462.017 163.37 462.295 163.094 462.635 163.094 cv
463.767 163.094 li
464.105 163.094 464.381 163.37 464.381 163.708 cv
464.381 220.179 li
464.381 220.517 464.105 220.793 463.767 220.793 cv
462.635 220.793 li
462.295 220.793 462.017 220.517 462.017 220.179 cv
462.019 219.174 li
462.017 218.494 461.466 217.941 460.786 217.941 cv
457.546 217.941 li
456.869 217.943 456.315 218.496 456.315 219.174 cv
456.315 220.179 li
456.315 220.517 456.037 220.793 455.698 220.793 cv
454.568 220.793 li
454.228 220.793 453.951 220.517 453.951 220.179 cv
453.951 218.333 li
453.952 217.654 453.397 217.1 452.719 217.1 cv
420.629 217.1 li
419.95 217.1 419.397 217.654 419.397 218.335 cv
419.397 220.179 li
419.397 220.517 419.12 220.793 418.778 220.793 cv
417.648 220.793 li
417.31 220.793 417.033 220.517 417.033 220.179 cv
417.033 219.17 li
417.033 218.492 416.48 217.939 415.8 217.939 cv
412.56 217.939 li
411.882 217.939 411.329 218.492 411.329 219.17 cv
411.329 220.179 li
411.329 220.517 411.053 220.793 410.712 220.793 cv
409.58 220.793 li
409.241 220.793 408.965 220.517 408.965 220.179 cv
408.965 163.708 li
408.965 163.37 409.241 163.094 409.58 163.094 cv
409.58 163.094 li
cp
level3{
gsave
[78.612 0 0 78.612 468.13 172.023 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[78.612 0 0 78.612 468.13 172.023 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
275.699 168.659 mo
269.888 162.408 li
276.69 160.85 li
277.053 160.767 277.416 160.995 277.5 161.357 cv
278.848 167.245 li
278.931 167.607 278.705 167.97 278.341 168.053 cv
275.699 168.659 li
cp
266.212 170.834 mo
271.135 169.705 li
265.323 163.455 li
260.403 164.583 li
266.212 170.834 li
266.212 170.834 li
cp
256.725 173.006 mo
250.916 166.756 li
255.839 165.629 li
261.647 171.879 li
256.725 173.006 li
256.725 173.006 li
cp
247.238 175.18 mo
252.16 174.053 li
246.351 167.803 li
241.429 168.932 li
247.238 175.18 li
247.238 175.18 li
cp
237.75 177.357 mo
231.942 171.105 li
236.864 169.978 li
242.674 176.228 li
237.75 177.357 li
237.75 177.357 li
cp
277.14 181.39 mo
279.85 181.39 li
280.221 181.39 280.525 181.694 280.525 182.066 cv
280.525 188.107 li
280.525 188.479 280.221 188.781 279.85 188.781 cv
272.872 188.781 li
277.14 181.39 li
277.14 181.39 li
cp
267.405 181.39 mo
272.456 181.39 li
268.19 188.781 li
263.139 188.781 li
267.405 181.39 li
267.405 181.39 li
cp
257.674 181.39 mo
262.724 181.39 li
258.456 188.781 li
253.405 188.781 li
257.674 181.39 li
257.674 181.39 li
cp
247.94 181.39 mo
252.99 181.39 li
248.725 188.781 li
243.674 188.781 li
247.94 181.39 li
247.94 181.39 li
cp
238.207 181.39 mo
243.257 181.39 li
238.99 188.781 li
233.94 188.781 li
238.207 181.39 li
238.207 181.39 li
cp
223.477 181.39 mo
223.477 183.233 221.985 184.725 220.144 184.725 cv
220.144 188.107 li
220.144 188.479 220.446 188.781 220.818 188.781 cv
229.257 188.781 li
233.525 181.39 li
223.477 181.39 li
223.477 181.39 li
cp
220.144 178.705 mo
221.626 178.705 222.829 179.906 222.829 181.39 cv
222.829 182.876 221.626 184.079 220.144 184.079 cv
218.657 184.079 217.456 182.876 217.456 181.39 cv
217.456 179.906 218.657 178.705 220.144 178.705 cv
220.144 178.705 li
cp
229.103 205.772 mo
228.644 205.772 228.269 206.146 228.269 206.604 cv
228.269 207.64 li
228.269 208.1 228.644 208.474 229.103 208.474 cv
256.876 208.474 li
257.335 208.474 257.711 208.1 257.711 207.64 cv
257.711 206.604 li
257.711 206.146 257.335 205.772 256.876 205.772 cv
229.103 205.772 li
229.103 205.772 li
cp
229.103 213.792 mo
228.644 213.792 228.269 214.168 228.269 214.627 cv
228.269 215.66 li
228.269 216.12 228.644 216.495 229.103 216.495 cv
264.446 216.495 li
264.905 216.495 265.28 216.12 265.28 215.66 cv
265.28 214.627 li
265.28 214.168 264.905 213.792 264.446 213.792 cv
229.103 213.792 li
229.103 213.792 li
cp
229.103 197.751 mo
228.644 197.751 228.269 198.125 228.269 198.584 cv
228.269 199.62 li
228.269 200.078 228.644 200.454 229.103 200.454 cv
271.508 200.454 li
271.966 200.454 272.34 200.078 272.34 199.62 cv
272.34 198.584 li
272.34 198.125 271.966 197.751 271.508 197.751 cv
229.103 197.751 li
229.103 197.751 li
cp
220.825 191.191 mo
279.785 191.191 li
280.161 191.191 280.467 191.498 280.467 191.874 cv
280.467 216.24 li
280.467 219.992 277.406 223.052 273.655 223.052 cv
226.955 223.052 li
223.203 223.052 220.144 219.992 220.144 216.24 cv
220.144 191.874 li
220.144 191.498 220.449 191.191 220.825 191.191 cv
220.825 191.191 li
cp
223.395 180.646 mo
233.186 178.402 li
227.377 172.152 li
219.149 174.037 li
218.787 174.12 218.559 174.482 218.643 174.845 cv
219.397 178.139 li
219.638 178.084 219.887 178.057 220.144 178.057 cv
221.727 178.057 223.055 179.163 223.395 180.646 cv
223.395 180.646 li
cp
level3{
gsave
[73.7474 0 0 73.7474 284.962 187.897 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[73.7474 0 0 73.7474 284.962 187.897 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
163.815 425.49 mo
163.659 424.826 162.655 425.061 162.811 425.726 cv
169.309 453.433 li
148.699 453.433 li
148.017 453.433 148.017 454.464 148.699 454.464 cv
169.909 454.464 li
170.221 454.483 170.557 454.237 170.461 453.835 cv
163.815 425.49 li
cp
140.633 459.033 mo
177.306 459.033 li
180.146 459.033 180.146 463.326 177.306 463.326 cv
140.633 463.326 li
137.792 463.326 137.792 459.033 140.633 459.033 cv
140.633 459.033 li
cp
162.182 406.53 mo
160.042 406.53 157.898 406.53 155.757 406.53 cv
155.58 406.53 155.484 406.349 155.401 406.136 cv
150.377 393.295 li
150.285 393.062 150.47 392.723 150.734 392.723 cv
156.224 392.723 161.714 392.723 167.207 392.723 cv
167.467 392.723 167.651 393.062 167.562 393.295 cv
162.537 406.136 li
162.455 406.35 162.359 406.53 162.182 406.53 cv
162.182 406.53 li
cp
150.188 428.961 mo
153.153 416.776 li
145.431 414.78 li
142.295 426.919 li
150.188 428.961 li
150.188 428.961 li
cp
155.683 408.477 mo
162.256 408.477 li
162.568 408.477 162.818 408.698 162.892 409.003 cv
174.411 456.315 li
174.492 456.653 174.241 457.087 173.772 457.087 cv
144.167 457.087 li
143.697 457.087 143.446 456.653 143.529 456.315 cv
149.355 432.381 li
138.003 429.449 li
142.902 410.489 li
153.987 413.354 li
155.045 409.003 li
155.12 408.698 155.368 408.477 155.683 408.477 cv
155.683 408.477 li
cp
level3{
gsave
[75.1768 0 0 75.1768 186.787 410.955 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[75.1768 0 0 75.1768 186.787 410.955 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
136.425 64.1996 mo
136.425 66.9922 li
138.277 67.168 139.567 67.5637 139.567 68.0193 cv
139.567 68.3618 138.844 68.668 137.705 68.8751 cv
153.388 80.5559 164.049 80.5559 179.732 68.8751 cv
178.593 68.668 177.873 68.3618 177.873 68.0193 cv
177.873 67.5637 179.163 67.168 181.012 66.9922 cv
181.012 64.1996 li
178.888 63.3119 177.398 61.2173 177.398 58.7718 cv
177.398 55.5255 180.028 52.8928 183.276 52.8928 cv
186.521 52.8928 189.154 55.5255 189.154 58.7718 cv
189.154 61.2173 187.662 63.3119 185.539 64.1996 cv
185.539 67.009 li
187.299 67.1936 188.512 67.5773 188.512 68.0193 cv
188.512 68.4647 187.299 68.8477 185.539 69.0302 cv
185.539 101.776 li
188.472 102.612 190.669 105.025 190.982 107.957 cv
191.023 108.35 190.722 108.685 190.328 108.685 cv
176.222 108.685 li
175.829 108.685 175.527 108.348 175.568 107.957 cv
175.882 105.025 178.079 102.61 181.012 101.776 cv
181.012 71.6483 li
167.137 83.655 150.3 83.655 136.425 71.6483 cv
136.425 101.776 li
139.36 102.61 141.557 105.025 141.869 107.957 cv
141.913 108.348 141.61 108.685 141.218 108.685 cv
127.111 108.685 li
126.717 108.685 126.416 108.35 126.458 107.957 cv
126.77 105.025 128.967 102.612 131.9 101.776 cv
131.9 69.0302 li
130.139 68.8477 128.927 68.4647 128.927 68.0193 cv
128.927 67.5773 130.139 67.1936 131.9 67.009 cv
131.9 64.1996 li
129.777 63.3119 128.285 61.2173 128.285 58.7718 cv
128.285 55.5255 130.916 52.8928 134.163 52.8928 cv
137.411 52.8928 140.042 55.5255 140.042 58.7718 cv
140.042 61.2173 138.549 63.3119 136.425 64.1996 cv
cp
level3{
gsave
[82.2165 0 0 82.2165 197.827 72.8841 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[82.2165 0 0 82.2165 197.827 72.8841 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
249.862 403.172 mo
249.661 402.648 248.91 402.648 248.709 403.172 cv
246.805 408.094 li
241.536 408.382 li
240.969 408.415 240.738 409.126 241.177 409.482 cv
245.272 412.811 li
243.919 417.913 li
243.772 418.46 244.377 418.898 244.852 418.592 cv
249.285 415.728 li
253.719 418.592 li
254.194 418.898 254.799 418.46 254.652 417.913 cv
253.299 412.811 li
257.392 409.482 li
257.831 409.121 257.6 408.415 257.037 408.382 cv
251.766 408.094 li
249.862 403.172 li
cp
227.822 391.175 mo
228.499 391.175 229.051 391.73 229.051 392.404 cv
229.051 429.926 li
229.051 430.602 228.499 431.153 227.822 431.153 cv
227.146 431.153 226.593 430.602 226.593 429.926 cv
226.593 392.404 li
226.593 391.728 227.146 391.175 227.822 391.175 cv
227.822 391.175 li
cp
270.749 391.175 mo
271.425 391.175 271.978 391.73 271.978 392.404 cv
271.978 429.926 li
271.978 430.602 271.425 431.153 270.749 431.153 cv
270.072 431.153 269.52 430.602 269.52 429.926 cv
269.52 392.404 li
269.52 391.728 270.072 391.175 270.749 391.175 cv
270.749 391.175 li
cp
222.448 432.474 mo
275.535 432.474 li
277.919 432.474 277.919 436.077 275.535 436.077 cv
222.448 436.077 li
220.062 436.077 220.062 432.474 222.448 432.474 cv
222.448 432.474 li
cp
253.923 451.783 mo
250.23 453.917 li
268.587 464.517 li
269.505 465.045 270.881 465.061 271.467 464.045 cv
272.049 463.035 271.341 461.839 270.436 461.317 cv
253.923 451.783 li
253.923 451.783 li
cp
226.511 438.09 mo
225.929 439.101 226.639 440.296 227.543 440.819 cv
244.058 450.353 li
247.751 448.22 li
229.391 437.621 li
228.475 437.09 227.099 437.074 226.511 438.09 cv
226.511 438.09 li
cp
271.47 438.09 mo
272.054 439.101 271.341 440.297 270.436 440.819 cv
229.394 464.517 li
228.475 465.046 227.099 465.063 226.513 464.045 cv
225.931 463.037 226.639 461.839 227.545 461.317 cv
268.589 437.621 li
269.505 437.09 270.881 437.077 271.47 438.09 cv
271.47 438.09 li
cp
230.291 395.696 mo
238.333 400.701 260.238 400.701 268.282 395.696 cv
268.282 418.305 li
260.238 423.313 238.333 423.313 230.291 418.305 cv
230.291 395.696 li
230.291 395.696 li
cp
level3{
gsave
[79.0146 0 0 79.0146 281.796 413.582 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[79.0146 0 0 79.0146 281.796 413.582 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
55.1389 63.7527 mo
27.0143 79.9894 li
27.2628 69.7547 32.276 60.7037 39.9192 54.9629 cv
55.1389 63.7527 li
cp
42.4557 75.8468 mo
27.2342 84.6345 li
28.426 94.669 34.2238 103.29 42.4557 108.326 cv
42.4557 75.8468 li
42.4557 75.8468 li
cp
59.2715 113.05 mo
54.7676 113.05 50.4809 112.127 46.5876 110.46 cv
46.5876 92.8805 li
74.7169 109.121 li
70.1285 111.626 64.866 113.05 59.2715 113.05 cv
59.2715 113.05 li
cp
76.0883 85.7204 mo
76.0883 53.2392 li
84.4706 58.3497 90.1474 67.1886 91.3126 76.9306 cv
76.0883 85.7204 li
76.0883 85.7204 li
cp
63.4033 97.8164 mo
78.6296 106.608 li
86.484 100.724 91.3 91.3904 91.5325 81.5777 cv
63.4033 97.8164 li
63.4033 97.8164 li
cp
71.9554 68.6865 mo
71.9554 51.1071 li
62.935 47.2472 52.4423 47.7418 43.8251 52.4481 cv
71.9554 68.6865 li
71.9554 68.6865 li
cp
level3{
gsave
[73.8743 0 0 73.8743 94.7445 70.8923 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[73.8743 0 0 73.8743 94.7445 70.8923 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
335.006 106.846 mo
349.131 106.846 li
352.409 106.846 355.082 109.519 355.082 112.8 cv
355.082 113.948 li
355.082 114.313 354.788 114.61 354.422 114.61 cv
329.714 114.61 li
329.351 114.61 329.055 114.313 329.055 113.948 cv
329.055 112.8 li
329.055 109.519 331.729 106.846 335.006 106.846 cv
cp
342.069 46.9678 mo
351.092 46.9678 358.475 54.3502 358.475 63.3734 cv
358.475 63.3744 li
347.162 63.3744 li
346.617 63.3744 346.171 63.8206 346.171 64.3659 cv
346.171 64.9104 346.617 65.3585 347.162 65.3585 cv
358.475 65.3585 li
358.475 69.8184 li
347.162 69.8184 li
346.617 69.8184 346.171 70.2643 346.171 70.8098 cv
346.171 71.3541 346.617 71.8024 347.162 71.8024 cv
358.475 71.8024 li
358.475 76.262 li
347.162 76.262 li
346.617 76.262 346.171 76.7104 346.171 77.2557 cv
346.171 77.8024 346.617 78.2473 347.162 78.2473 cv
358.475 78.2473 li
358.473 87.2704 351.092 94.6528 342.069 94.6528 cv
333.046 94.6528 325.664 87.2704 325.664 78.2461 cv
336.976 78.2461 li
337.522 78.2461 337.968 77.8002 337.968 77.2536 cv
337.968 76.7104 337.522 76.262 336.976 76.262 cv
325.664 76.262 li
325.664 71.8024 li
336.976 71.8024 li
337.522 71.8024 337.968 71.3541 337.968 70.8098 cv
337.968 70.2643 337.522 69.8184 336.976 69.8184 cv
325.664 69.8184 li
325.664 65.3585 li
336.976 65.3585 li
337.522 65.3585 337.968 64.9104 337.968 64.3659 cv
337.968 63.8206 337.522 63.3734 336.976 63.3734 cv
325.664 63.3734 li
325.664 54.3502 333.046 46.9678 342.069 46.9678 cv
342.069 46.9678 li
cp
345.023 96.9973 mo
345.023 104.342 li
345.023 104.628 344.788 104.862 344.503 104.862 cv
339.636 104.862 li
339.348 104.862 339.116 104.628 339.116 104.342 cv
339.116 96.9973 li
339.116 96.6792 339.391 96.4425 339.704 96.4817 cv
341.272 96.6856 342.866 96.6856 344.435 96.4817 cv
344.748 96.4425 345.023 96.6792 345.023 96.9973 cv
345.023 96.9973 li
cp
level3{
gsave
[64.1723 0 0 64.1723 368.496 72.1272 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[64.1723 0 0 64.1723 368.496 72.1272 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
238.977 45.2604 mo
245.65 45.2604 252.328 45.2604 259.001 45.2604 cv
259.537 45.2604 259.919 45.7699 259.768 46.2847 cv
256.925 55.9271 li
256.874 56.0974 256.722 56.2122 256.541 56.2122 cv
254.002 56.2122 li
252.499 55.446 250.794 55.0165 248.989 55.0165 cv
247.187 55.0165 245.482 55.446 243.978 56.2122 cv
241.438 56.2122 li
241.256 56.2122 241.105 56.0974 241.055 55.9271 cv
238.213 46.2847 li
238.063 45.7699 238.442 45.2604 238.977 45.2604 cv
cp
269.822 56.0788 mo
269.822 62.7549 269.822 69.4297 269.822 76.1045 cv
269.822 76.6413 269.31 77.0216 268.797 76.8707 cv
259.156 74.0279 li
258.984 73.9755 258.87 73.8235 258.87 73.6442 cv
258.87 71.1052 li
259.635 69.6003 260.066 67.8961 260.066 66.0917 cv
260.066 64.2883 259.635 62.5843 258.87 61.0792 cv
258.87 58.5404 li
258.87 58.3611 258.984 58.2069 259.156 58.1567 cv
268.797 55.3137 li
269.31 55.1642 269.822 55.5434 269.822 56.0788 cv
269.822 56.0788 li
cp
259.001 86.924 mo
252.328 86.924 245.65 86.924 238.977 86.924 cv
238.442 86.924 238.063 86.4125 238.213 85.8987 cv
241.055 76.2598 li
241.105 76.0859 241.256 75.9713 241.438 75.9713 cv
243.978 75.9713 li
245.482 76.7373 247.187 77.1702 248.989 77.1702 cv
250.794 77.1702 252.499 76.7373 254.002 75.9713 cv
256.541 75.9713 li
256.722 75.9713 256.874 76.0859 256.925 76.2598 cv
259.768 85.8987 li
259.919 86.4125 259.539 86.924 259.001 86.924 cv
259.001 86.924 li
cp
228.159 76.1045 mo
228.159 69.4297 228.159 62.7549 228.159 56.0799 cv
228.159 55.5434 228.668 55.1642 229.182 55.3137 cv
238.824 58.1567 li
238.995 58.2069 239.11 58.3611 239.11 58.5404 cv
239.11 61.0792 li
238.344 62.5843 237.912 64.2883 237.912 66.0917 cv
237.912 67.8961 238.344 69.6003 239.11 71.1052 cv
239.11 73.6442 li
239.11 73.8235 238.995 73.9755 238.824 74.0279 cv
229.182 76.8707 li
228.668 77.0216 228.159 76.6413 228.159 76.1045 cv
228.159 76.1045 li
cp
249.878 89.0728 mo
249.878 104.321 li
257.211 111.657 li
257.556 112.002 257.558 112.569 257.211 112.913 cv
256.867 113.258 256.3 113.258 255.956 112.913 cv
249.878 106.835 li
249.878 115.429 li
249.878 115.919 249.478 116.318 248.989 116.318 cv
248.501 116.318 248.101 115.919 248.101 115.429 cv
248.101 106.836 li
242.023 112.913 li
241.678 113.257 241.112 113.258 240.768 112.913 cv
240.423 112.569 240.423 112.002 240.768 111.657 cv
248.101 104.321 li
248.101 89.0728 li
248.101 88.7767 248.341 88.534 248.638 88.534 cv
249.341 88.534 li
249.638 88.534 249.878 88.7767 249.878 89.0728 cv
249.878 89.0728 li
cp
248.989 75.9713 mo
254.445 75.9713 258.87 71.549 258.87 66.0917 cv
258.87 60.6356 254.445 56.2122 248.989 56.2122 cv
243.533 56.2122 239.11 60.6356 239.11 66.0917 cv
239.11 71.549 243.533 75.9713 248.989 75.9713 cv
248.989 75.9713 li
cp
level3{
gsave
[63.3824 0 0 63.3824 283.307 72.6962 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[63.3824 0 0 63.3824 283.307 72.6962 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
249.695 306.048 mo
249.452 305.401 248.532 305.403 248.286 306.048 cv
245.39 313.716 li
245.283 314.004 245.029 314.188 244.722 314.202 cv
236.535 314.586 li
235.842 314.617 235.558 315.492 236.101 315.924 cv
242.497 321.05 li
242.737 321.239 242.835 321.539 242.754 321.835 cv
240.589 329.741 li
240.406 330.409 241.152 330.949 241.73 330.568 cv
248.579 326.067 li
248.834 325.897 249.147 325.897 249.404 326.065 cv
256.254 330.568 li
256.833 330.947 257.577 330.409 257.392 329.741 cv
255.228 321.835 li
255.148 321.539 255.246 321.239 255.485 321.05 cv
261.881 315.924 li
262.423 315.492 262.139 314.617 261.447 314.586 cv
253.259 314.202 li
252.953 314.187 252.699 314.003 252.591 313.716 cv
249.695 306.048 li
cp
269.244 289.819 mo
275.098 299.959 li
276.215 299.959 li
276.743 299.959 277.177 299.527 277.177 298.999 cv
277.177 290.781 li
277.177 290.252 276.743 289.819 276.215 289.819 cv
269.244 289.819 li
269.244 289.819 li
cp
260.167 289.819 mo
265.299 289.819 li
271.155 299.959 li
266.024 299.959 li
260.167 289.819 li
260.167 289.819 li
cp
251.094 289.819 mo
256.949 299.959 li
262.08 299.959 li
256.225 289.819 li
251.094 289.819 li
251.094 289.819 li
cp
242.017 289.819 mo
247.148 289.819 li
253.003 299.959 li
247.874 299.961 li
242.017 289.819 li
242.017 289.819 li
cp
232.943 289.819 mo
238.798 299.959 li
243.929 299.959 li
238.073 289.819 li
232.943 289.819 li
232.943 289.819 li
cp
221.764 289.819 mo
228.999 289.819 li
234.854 299.959 li
221.764 299.959 li
221.236 299.959 220.804 299.527 220.804 298.999 cv
220.804 290.781 li
220.804 290.252 221.236 289.819 221.764 289.819 cv
221.764 289.819 li
cp
222.095 301.901 mo
275.886 301.901 li
276.597 301.901 277.177 302.479 277.177 303.191 cv
277.177 330.681 li
277.177 333.883 274.566 336.493 271.368 336.493 cv
226.613 336.493 li
223.415 336.493 220.804 333.883 220.804 330.681 cv
220.804 303.191 li
220.804 302.479 221.384 301.901 222.095 301.901 cv
222.095 301.901 li
cp
level3{
gsave
[69.6492 0 0 69.6492 283.24 306.066 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[69.6492 0 0 69.6492 283.24 306.066 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
70.824 205.349 mo
70.824 193.172 li
70.824 192.827 71.1165 192.558 71.4621 192.591 cv
74.8625 192.913 77.5228 195.776 77.5228 199.26 cv
77.5228 202.745 74.8625 205.61 71.4621 205.932 cv
71.1165 205.963 70.824 205.696 70.824 205.349 cv
cp
47.7228 193.172 mo
47.7217 205.349 li
47.7217 205.696 47.4292 205.963 47.0847 205.932 cv
43.6822 205.61 41.023 202.745 41.023 199.26 cv
41.023 195.776 43.6822 192.913 47.0847 192.591 cv
47.4292 192.558 47.7228 192.827 47.7228 193.172 cv
47.7228 193.172 li
cp
47.7217 208.498 mo
70.824 208.498 li
75.9247 208.498 80.0594 204.361 80.0594 199.26 cv
80.0594 194.16 75.9247 190.025 70.824 190.025 cv
47.7217 190.025 li
42.6221 190.025 38.4862 194.16 38.4862 199.26 cv
38.4862 204.361 42.6221 208.498 47.7217 208.498 cv
47.7217 208.498 li
cp
92.8308 187.129 mo
92.8308 186.807 92.5696 186.546 92.2467 186.546 cv
26.298 186.546 li
25.9772 186.546 25.7161 186.807 25.7161 187.129 cv
25.7161 213.726 li
25.7161 215.741 27.3641 217.39 29.3804 217.39 cv
89.1652 217.39 li
91.1816 217.39 92.8308 215.741 92.8308 213.726 cv
92.8308 187.129 li
92.8308 187.129 li
cp
50.0533 192.562 mo
68.4935 192.562 li
68.8135 192.562 69.0747 192.823 69.0747 193.143 cv
69.0747 205.378 li
69.0747 205.698 68.8135 205.961 68.4935 205.961 cv
50.0533 205.961 li
49.7332 205.961 49.4701 205.698 49.4701 205.378 cv
49.4701 193.143 li
49.4701 192.823 49.7332 192.562 50.0533 192.562 cv
50.0533 192.562 li
cp
29.3804 181.131 mo
89.1652 181.131 li
90.944 181.131 92.4361 182.417 92.7641 184.102 cv
92.8356 184.465 92.5598 184.795 92.1917 184.795 cv
26.3551 184.795 li
25.986 184.795 25.711 184.465 25.7807 184.102 cv
26.1087 182.417 27.6018 181.131 29.3804 181.131 cv
29.3804 181.131 li
cp
level3{
gsave
[76.7807 0 0 76.7807 96.5344 190.476 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[76.7807 0 0 76.7807 96.5344 190.476 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
26.6782 423.865 mo
28.2473 423.865 29.5308 425.148 29.5308 426.718 cv
29.5308 435.626 li
29.5308 436.023 29.2076 436.345 28.8126 436.345 cv
24.5448 436.345 li
24.1486 436.345 23.8266 436.023 23.8266 435.626 cv
23.8266 426.718 li
23.8266 425.148 25.1078 423.865 26.6782 423.865 cv
cp
59.274 423.865 mo
60.8442 423.865 62.1255 425.148 62.1255 426.718 cv
62.1255 435.626 li
62.1255 436.023 61.8035 436.345 61.4073 436.345 cv
57.1395 436.345 li
56.7445 436.345 56.4213 436.023 56.4213 435.626 cv
56.4213 426.718 li
56.4213 425.148 57.7038 423.865 59.274 423.865 cv
59.274 423.865 li
cp
86.8616 413.582 mo
86.8616 432.032 li
86.8616 434.409 84.9242 436.345 82.5485 436.345 cv
68.592 436.345 li
66.2152 436.345 64.2787 434.409 64.2787 432.032 cv
64.2787 413.524 li
64.2787 407.288 69.3354 402.233 75.5709 402.233 cv
81.7806 402.233 86.937 407.342 86.8616 413.582 cv
86.8616 413.582 li
cp
91.8687 423.865 mo
93.439 423.865 94.7203 425.148 94.7203 426.718 cv
94.7203 435.626 li
94.7203 436.023 94.3983 436.345 94.001 436.345 cv
89.7343 436.345 li
89.3393 436.345 89.0173 436.023 89.0173 435.626 cv
89.0173 426.718 li
89.0173 425.148 90.2985 423.865 91.8687 423.865 cv
91.8687 423.865 li
cp
24.6066 438.504 mo
93.9412 438.504 li
94.3694 438.504 94.7203 438.857 94.7203 439.284 cv
94.7203 442.39 li
94.7203 442.744 94.48 443.046 94.1549 443.14 cv
94.1549 452.379 li
94.1549 453.172 93.5097 453.816 92.7197 453.816 cv
89.5827 453.816 li
88.7882 453.816 88.1441 453.172 88.1441 452.379 cv
88.1441 443.17 li
62.2794 443.17 li
62.2794 452.379 li
62.2794 453.172 61.6342 453.816 60.842 453.816 cv
57.7049 453.816 li
56.9127 453.816 56.2686 453.172 56.2686 452.379 cv
56.2686 443.17 li
30.4037 443.17 li
30.4037 452.379 li
30.4037 453.172 29.7576 453.816 28.9642 453.816 cv
25.8283 453.816 li
25.0371 453.816 24.3932 453.172 24.3932 452.379 cv
24.3932 443.14 li
24.0666 443.046 23.8266 442.744 23.8266 442.39 cv
23.8266 439.284 li
23.8266 438.857 24.1774 438.504 24.6066 438.504 cv
24.6066 438.504 li
cp
54.2669 413.582 mo
54.2669 432.032 li
54.2669 434.409 52.3293 436.345 49.9538 436.345 cv
35.996 436.345 li
33.6205 436.345 31.6829 434.409 31.6829 432.032 cv
31.6829 413.524 li
31.6829 407.288 36.7407 402.233 42.976 402.233 cv
49.1857 402.233 54.3422 407.342 54.2669 413.582 cv
54.2669 413.582 li
cp
level3{
gsave
[80.6989 0 0 80.6989 92.54 413.368 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[80.6989 0 0 80.6989 92.54 413.368 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
443.242 433.356 mo
443.236 433.004 442.949 432.721 442.596 432.721 cv
431.915 432.721 li
431.408 432.721 431.1 433.274 431.366 433.706 cv
433.551 437.245 li
433.68 437.457 433.675 437.711 433.532 437.914 cv
429.726 443.369 li
429.402 443.831 429.824 444.444 430.371 444.312 cv
436.83 442.736 li
437.072 442.678 437.312 442.762 437.463 442.961 cv
441.473 448.268 li
441.813 448.717 442.527 448.505 442.568 447.945 cv
443.066 441.313 li
443.086 441.065 443.242 440.862 443.478 440.782 cv
449.762 438.608 li
450.294 438.425 450.315 437.678 449.796 437.466 cv
443.641 434.942 li
443.41 434.846 443.267 434.638 443.263 434.391 cv
443.242 433.356 li
cp
415.71 400.089 mo
444.647 400.089 li
445.468 400.089 446.141 400.762 446.141 401.583 cv
446.141 421.974 li
446.141 422.795 445.468 423.468 444.647 423.468 cv
415.71 423.468 li
414.889 423.468 414.217 422.795 414.217 421.974 cv
414.217 401.583 li
414.217 400.762 414.889 400.089 415.71 400.089 cv
415.71 400.089 li
cp
430.75 401.975 mo
433.099 408.2 li
433.189 408.431 433.392 408.581 433.641 408.592 cv
440.286 408.902 li
440.848 408.929 441.078 409.64 440.638 409.99 cv
435.448 414.147 li
435.254 414.303 435.174 414.546 435.24 414.787 cv
436.996 421.201 li
437.146 421.742 436.542 422.18 436.073 421.872 cv
430.515 418.219 li
430.308 418.083 430.05 418.083 429.843 418.221 cv
424.285 421.872 li
423.816 422.182 423.212 421.744 423.361 421.201 cv
425.118 414.787 li
425.183 414.546 425.104 414.303 424.911 414.147 cv
419.718 409.99 li
419.279 409.64 419.509 408.929 420.072 408.902 cv
426.716 408.592 li
426.965 408.581 427.169 408.431 427.258 408.2 cv
429.608 401.975 li
429.805 401.454 430.553 401.451 430.75 401.975 cv
430.75 401.975 li
cp
404.697 392.772 mo
404.119 392.772 403.833 393.473 404.242 393.878 cv
404.936 394.567 405.366 395.52 405.366 396.574 cv
405.366 397.953 404.633 399.157 403.537 399.823 cv
403.123 400.076 403.123 400.675 403.537 400.927 cv
404.633 401.592 405.366 402.801 405.366 404.177 cv
405.366 405.552 404.633 406.761 403.537 407.426 cv
403.123 407.678 403.123 408.278 403.537 408.529 cv
404.633 409.196 405.366 410.403 405.366 411.779 cv
405.366 413.155 404.633 414.361 403.537 415.028 cv
403.123 415.28 403.123 415.88 403.537 416.132 cv
404.633 416.796 405.366 418.005 405.366 419.381 cv
405.366 420.759 404.633 421.965 403.537 422.632 cv
403.123 422.882 403.123 423.482 403.537 423.734 cv
404.633 424.4 405.366 425.607 405.366 426.983 cv
405.366 428.038 404.936 428.992 404.242 429.681 cv
403.833 430.085 404.119 430.783 404.697 430.783 cv
455.66 430.783 li
456.238 430.783 456.524 430.085 456.115 429.681 cv
455.422 428.992 454.992 428.038 454.992 426.983 cv
454.992 425.607 455.724 424.4 456.819 423.734 cv
457.233 423.482 457.233 422.882 456.819 422.632 cv
455.724 421.965 454.992 420.759 454.992 419.381 cv
454.992 418.005 455.724 416.796 456.819 416.132 cv
457.233 415.88 457.233 415.28 456.819 415.028 cv
455.724 414.361 454.992 413.155 454.992 411.779 cv
454.992 410.403 455.724 409.196 456.819 408.529 cv
457.233 408.278 457.233 407.678 456.819 407.426 cv
455.724 406.761 454.992 405.552 454.992 404.177 cv
454.992 402.801 455.724 401.592 456.819 400.927 cv
457.233 400.675 457.233 400.076 456.819 399.823 cv
455.724 399.157 454.992 397.953 454.992 396.574 cv
454.992 395.52 455.422 394.567 456.115 393.878 cv
456.524 393.473 456.238 392.772 455.66 392.772 cv
404.697 392.772 li
404.697 392.772 li
cp
459.029 423.631 mo
469.692 427.433 li
470.234 427.625 470.27 428.381 469.749 428.624 cv
468.865 429.041 468.141 429.795 467.785 430.787 cv
467.324 432.085 467.608 433.468 468.416 434.465 cv
468.721 434.839 468.523 435.401 468.046 435.502 cv
466.791 435.76 465.696 436.652 465.233 437.95 cv
464.772 439.246 465.057 440.628 465.865 441.623 cv
466.17 442 465.973 442.564 465.495 442.664 cv
464.239 442.923 463.144 443.813 462.681 445.111 cv
462.219 446.408 462.507 447.789 463.314 448.786 cv
463.621 449.165 463.42 449.725 462.944 449.823 cv
461.687 450.084 460.592 450.976 460.13 452.271 cv
459.669 453.569 459.953 454.952 460.762 455.946 cv
461.067 456.325 460.867 456.885 460.391 456.986 cv
459.134 457.244 458.041 458.136 457.578 459.432 cv
457.224 460.426 457.311 461.468 457.731 462.351 cv
457.982 462.873 457.477 463.43 456.933 463.238 cv
408.926 446.13 li
408.383 445.938 408.345 445.182 408.866 444.939 cv
409.751 444.524 410.476 443.768 410.83 442.776 cv
411.292 441.478 411.007 440.095 410.2 439.099 cv
409.893 438.722 410.094 438.16 410.569 438.062 cv
411.824 437.803 412.921 436.911 413.383 435.613 cv
413.631 434.911 413.664 434.184 413.511 433.508 cv
413.42 433.102 413.726 432.721 414.141 432.721 cv
422.894 432.721 li
423.344 432.721 423.653 433.162 423.503 433.584 cv
420.851 441.027 li
420.576 441.803 420.982 442.66 421.756 442.936 cv
449.014 452.648 li
449.788 452.924 450.645 452.516 450.921 451.743 cv
457.767 432.533 li
458.224 431.249 458.547 429.365 457.478 428.305 cv
457.126 427.953 456.928 427.482 456.928 426.983 cv
456.928 426.327 457.268 425.727 457.828 425.388 cv
458.474 424.996 458.902 424.358 459.029 423.631 cv
459.029 423.631 li
cp
level3{
gsave
[71.7613 0 0 71.7613 469.585 412.407 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[71.7613 0 0 71.7613 469.585 412.407 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
313.443 196.566 mo
311.429 197.106 310.223 199.195 310.763 201.207 cv
313.426 200.494 li
313.895 200.369 314.38 200.65 314.505 201.119 cv
314.631 201.586 314.35 202.073 313.881 202.199 cv
311.221 202.911 li
311.578 204.254 li
314.242 203.539 li
314.709 203.414 315.196 203.694 315.32 204.164 cv
315.448 204.633 315.165 205.118 314.698 205.242 cv
312.034 205.956 li
312.395 207.299 li
315.057 206.585 li
315.524 206.459 316.011 206.74 316.137 207.209 cv
316.263 207.678 315.982 208.163 315.513 208.287 cv
312.85 209.001 li
313.39 211.016 315.481 212.221 317.496 211.681 cv
320.307 210.929 li
320.619 210.845 320.806 210.519 320.721 210.209 cv
316.977 196.228 li
316.893 195.914 316.569 195.727 316.257 195.812 cv
313.443 196.566 li
cp
368.767 203.294 mo
372.757 201.397 374.581 195.201 372.851 188.748 cv
371.121 182.292 366.445 177.84 362.041 178.193 cv
361.857 178.207 361.733 178.384 361.782 178.56 cv
368.357 203.104 li
368.404 203.282 368.601 203.374 368.767 203.294 cv
368.767 203.294 li
cp
329.495 185.622 mo
337.614 180.561 345.732 175.497 353.846 170.434 cv
355.531 169.386 357.728 170.249 358.242 172.168 cv
361.658 184.915 365.074 197.663 368.49 210.411 cv
369.003 212.329 367.534 214.177 365.551 214.11 cv
344.642 213.397 li
344.067 226.19 li
344 227.659 342.755 228.707 341.303 228.515 cv
336.453 227.875 li
334.998 227.682 333.864 226.324 333.93 224.851 cv
334.451 213.309 li
334.17 213.362 333.887 213.429 333.595 213.505 cv
331.571 214.049 329.544 214.593 327.518 215.135 cv
325.641 215.637 323.701 214.518 323.199 212.641 cv
321.434 206.054 319.669 199.47 317.906 192.883 cv
317.401 191.006 318.522 189.066 320.399 188.563 cv
322.425 188.021 324.45 187.478 326.476 186.936 cv
327.595 186.635 328.512 186.237 329.495 185.622 cv
329.495 185.622 li
cp
level3{
gsave
[79.4963 0 0 79.4963 376.361 175.5 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[79.4963 0 0 79.4963 376.361 175.5 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
305.831 318.938 mo
305.831 322.698 305.831 326.458 305.831 330.216 cv
305.831 330.657 306.19 331.018 306.629 331.018 cv
313.165 331.018 319.702 331.018 326.238 331.018 cv
326.459 331.018 326.648 330.939 326.805 330.783 cv
329.677 327.909 332.553 325.032 335.428 322.157 cv
335.584 322.003 335.663 321.812 335.663 321.591 cv
335.663 320.706 335.663 319.822 335.663 318.938 cv
335.663 318.497 335.303 318.136 334.862 318.136 cv
325.452 318.136 316.042 318.136 306.629 318.136 cv
306.19 318.136 305.831 318.497 305.831 318.938 cv
cp
378.312 318.938 mo
378.312 318.497 377.953 318.136 377.511 318.136 cv
368.099 318.136 358.69 318.136 349.279 318.136 cv
348.837 318.136 348.478 318.497 348.478 318.938 cv
348.478 319.822 348.478 320.706 348.478 321.591 cv
348.478 321.812 348.557 322.003 348.713 322.157 cv
351.586 325.032 354.464 327.909 357.337 330.783 cv
357.494 330.939 357.684 331.018 357.902 331.018 cv
364.438 331.018 370.974 331.018 377.511 331.018 cv
377.953 331.018 378.312 330.657 378.312 330.216 cv
378.312 326.458 378.312 322.698 378.312 318.938 cv
378.312 318.938 li
cp
331.791 288.887 mo
334.431 288.887 336.587 291.033 336.599 293.673 cv
336.629 300.496 li
336.632 301.387 335.917 302.106 335.026 302.106 cv
332.603 302.106 li
331.72 302.106 331 301.384 331 300.503 cv
331 296.655 li
331 295.931 330.119 295.58 329.621 296.101 cv
317.015 309.326 li
303.407 309.326 li
329.627 289.536 li
330.335 289 330.933 288.887 331.791 288.887 cv
331.791 288.887 li
cp
352.347 288.887 mo
349.709 288.887 347.553 291.033 347.543 293.673 cv
347.513 300.496 li
347.51 301.387 348.223 302.106 349.115 302.106 cv
351.539 302.106 li
352.42 302.106 353.14 301.384 353.14 300.503 cv
353.14 296.655 li
353.14 295.931 354.021 295.58 354.522 296.101 cv
367.128 309.326 li
380.736 309.326 li
354.513 289.536 li
353.803 289 353.208 288.887 352.347 288.887 cv
352.347 288.887 li
cp
300.221 311.73 mo
328.121 311.73 356.019 311.73 383.918 311.73 cv
384.359 311.73 384.718 312.089 384.718 312.531 cv
384.718 320.028 384.718 327.525 384.718 335.022 cv
384.718 336.345 383.639 337.425 382.316 337.425 cv
373.515 337.425 364.714 337.425 355.912 337.425 cv
355.251 337.425 354.68 337.19 354.212 336.72 cv
351.11 333.619 348.005 330.514 344.903 327.408 cv
343.344 325.849 340.798 325.849 339.238 327.408 cv
336.135 330.514 333.031 333.619 329.926 336.72 cv
329.461 337.19 328.89 337.425 328.228 337.425 cv
319.427 337.425 310.626 337.425 301.824 337.425 cv
300.501 337.425 299.42 336.345 299.42 335.022 cv
299.42 327.525 299.42 320.028 299.42 312.531 cv
299.42 312.089 299.782 311.73 300.221 311.73 cv
300.221 311.73 li
cp
level3{
gsave
[92.5467 0 0 92.5467 385.499 306.049 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[92.5467 0 0 92.5467 385.499 306.049 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
55.2742 305.173 mo
54.8887 306.422 54.3547 307.607 53.6922 308.704 cv
61.5677 308.704 li
59.2538 307.902 57.1278 306.697 55.2742 305.173 cv
cp
40.0085 305.067 mo
42.5973 305.067 44.6962 302.968 44.6962 300.378 cv
44.6962 297.789 42.5973 295.69 40.0085 295.69 cv
37.4187 295.69 35.3198 297.789 35.3198 300.378 cv
35.3198 302.968 37.4187 305.067 40.0085 305.067 cv
40.0085 305.067 li
cp
68.3619 294.101 mo
70.9514 294.101 73.0497 292.002 73.0497 289.412 cv
73.0497 286.823 70.9514 284.724 68.3619 284.724 cv
65.7722 284.724 63.6733 286.823 63.6733 289.412 cv
63.6733 292.002 65.7722 294.101 68.3619 294.101 cv
68.3619 294.101 li
cp
55.4999 319.553 mo
55.1389 319.553 54.844 319.848 54.844 320.209 cv
54.844 325.786 li
54.844 326.147 55.1389 326.442 55.4999 326.442 cv
70.0093 326.442 li
70.3704 326.442 70.6656 326.147 70.6656 325.786 cv
70.6656 320.209 li
70.6656 319.848 70.3704 319.553 70.0093 319.553 cv
55.4999 319.553 li
55.4999 319.553 li
cp
94.5782 310.222 mo
94.5782 318.437 94.5782 326.651 94.5782 334.866 cv
94.5782 335.329 94.3484 335.727 93.9468 335.959 cv
93.5463 336.19 93.0875 336.19 92.6865 335.959 cv
84.9308 331.479 85.5162 330.594 80.4735 330.421 cv
79.5644 333.843 76.4319 336.383 72.7353 336.383 cv
66.014 336.383 li
75.3096 352.482 li
75.676 353.117 75.4565 353.937 74.8207 354.304 cv
74.8204 354.304 li
74.1849 354.671 73.3651 354.451 72.9976 353.816 cv
64.2327 338.633 li
64.2327 356.164 li
64.2327 356.898 63.6328 357.498 62.8991 357.498 cv
62.8991 357.498 li
62.1649 357.498 61.5646 356.898 61.5646 356.164 cv
61.5646 338.633 li
52.7994 353.816 li
52.4319 354.451 51.6131 354.671 50.9779 354.304 cv
50.9772 354.304 li
50.3414 353.937 50.1216 353.117 50.4883 352.482 cv
59.783 336.383 li
53.0614 336.383 li
48.6588 336.383 45.0572 332.782 45.0572 328.38 cv
45.0572 316.708 li
45.0572 316.334 45.084 315.967 45.1339 315.607 cv
43.5164 316.157 41.7807 316.456 39.9761 316.456 cv
31.1358 316.456 23.9686 309.29 23.9686 300.449 cv
23.9686 291.609 31.1358 284.442 39.9761 284.442 cv
42.8854 284.442 45.6131 285.218 47.9646 286.575 cv
49.3076 276.548 57.8954 268.814 68.2906 268.814 cv
79.6179 268.814 88.8 277.996 88.8 289.324 cv
88.8 298.504 82.7682 306.275 74.4512 308.891 cv
77.3734 309.536 79.71 311.789 80.4735 314.666 cv
85.5162 314.494 84.9294 313.609 92.6865 309.13 cv
93.0875 308.898 93.5463 308.898 93.9468 309.129 cv
94.3484 309.361 94.5782 309.758 94.5782 310.222 cv
94.5782 310.222 li
cp
level3{
gsave
[65.1523 0 0 65.1523 91.4936 308.003 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[65.1523 0 0 65.1523 91.4936 308.003 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
365.607 430.402 mo
375.023 426.963 li
375.875 426.652 376.766 427.275 376.766 428.181 cv
376.766 438.683 376.766 443.992 376.766 454.494 cv
376.766 455.4 375.873 456.024 375.023 455.714 cv
365.607 452.274 li
365.346 452.179 365.18 451.943 365.18 451.665 cv
365.18 431.011 li
365.18 430.733 365.346 430.497 365.607 430.402 cv
cp
321.265 406 mo
319.461 406 317.999 407.462 317.999 409.266 cv
317.999 411.07 319.461 412.532 321.265 412.532 cv
323.069 412.532 324.531 411.07 324.531 409.266 cv
324.531 407.462 323.069 406 321.265 406 cv
321.265 406 li
cp
321.265 395.374 mo
328.937 395.374 335.157 401.594 335.157 409.266 cv
335.157 416.938 328.937 423.158 321.265 423.158 cv
313.594 423.158 307.373 416.938 307.373 409.266 cv
307.373 401.594 313.594 395.374 321.265 395.374 cv
321.265 395.374 li
cp
351.516 406 mo
349.712 406 348.25 407.462 348.25 409.266 cv
348.25 411.07 349.712 412.532 351.516 412.532 cv
353.321 412.532 354.783 411.07 354.783 409.266 cv
354.783 407.462 353.321 406 351.516 406 cv
351.516 406 li
cp
351.516 395.374 mo
359.189 395.374 365.408 401.594 365.408 409.266 cv
365.408 416.938 359.189 423.158 351.516 423.158 cv
343.844 423.158 337.625 416.938 337.625 409.266 cv
337.625 401.594 343.844 395.374 351.516 395.374 cv
351.516 395.374 li
cp
315.819 424.818 mo
356.153 424.818 li
360.047 424.818 363.233 428.004 363.233 431.898 cv
363.233 450.778 li
363.233 454.673 360.047 457.858 356.153 457.858 cv
315.819 457.858 li
311.925 457.858 308.74 454.673 308.74 450.778 cv
308.74 431.898 li
308.74 428.004 311.925 424.818 315.819 424.818 cv
315.819 424.818 li
cp
level3{
gsave
[75.8502 0 0 75.8502 376.156 418.76 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[75.8502 0 0 75.8502 376.156 418.76 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.1
%%For: (  ) ()
%%Title: (cinemaicons-02.eps)
%%CreationDate: 5/6/2016 5:23 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&kuo%JZ8R#Xp[e#?aR'9EaH]ac<8,to"1#bKN=DIL+U#jl#tq#ElM]aJqh^+KX&K/5=7>VMr`lL,n5`S%A7S)=AE7k2H?4*b
%hB.agS!/?ZYHa&L[8ehjNTFEs1@b6[f<7CZ^)kK6P1=Us0r_,7=Xl,=JMLPE;UL9e8cS-f0V32Y-iLktes_OEe(O\'l`]0Tp:PST
%DgJf%K@+B'Y?H"slQ=#'ND8rF1E6ibPNbYW?Bb&8_!E"gr+6.?5mI*GiTf1[#s^S)q&F(#]J96Tf2%iTOatldo',i*E&a=_Hh63,
%r8e\@D/;h.p!2L&B3mi8:d]J.i+9#R39Zomk,-@+8-QcRDq-P"411EQLs5'5#mE&0')S'2=RH4aX>9]\8@J:4rgq]H)E6boDn!!1
%e0L,IN=1!%g(2h&!JmfgOi5*#jRf6,4e>rfrU?T<_9(r?2]nE!(L#EHr%)EbT$_0YOS]S-dE2g>lY-PPABO4):g(qg`,o$mW@ogD
%bM^_*i*Z4o:C"T3_:4?2@liKbrYIE+8.tjH_QV9TKB\lqE";Q(KPAo0cR8UB&X4A$mu2Q<,8%QOVbOGNRiW(%+R>6=))g^W>4,%/
%EH]dtrA?k1A[[\eVh=O-j=LtdQt1?)VeM,<`4d,l[Xp=]\u&Eo>+\0IR4FY8`+G'U@8<s6Kaka*P5TD^4<0CMYN?8ha/mWPR1AtD
%bcA+:Ridl;4cfTkmQX?$Y[BX:N*S#;qQ9EQd[m96Hj>Sd)"4p\-eK1jr3H]U1Bs*_9b-RFn-?XZ/C%"->mU6!@KIV[a-cDc^V)>i
%no*9X1O/_+3]T:X*$7k's)"U;5M7"*h@BDRaV7p&^\2^:#Q/SB[R-EggR\'7O9b^Ne'r`^dp!W!#ka\tC?@*q97OPQ^WcGFp0`G<
%"pWm#s#Coj:8<bB]$'0E4mJ#Rdi,ph)0Udb_ODV9.:e8A#P7\VaqKHi'\Ga_:mt;]k9Pji?)FRgE4h89@D1q'?^'_/2VA#%(MrhW
%1>Or3bkjolCb>LUAA$`f+$lMS)"5d50?g&>ccCHc>pdTmD_r@R:4&m/_g\^J4e!JBFsiK9cb8>O0.D??YOK_.<b"=\NaIf@I25J`
%$-EF'XY\l4K1kfC<L!\?s#65&(pgJ3";A12(!fU\o<04VI!<)E.:M$-lXXoh)U;**mP2!VRPX;k#!7=Zk(?=[VO]m_=2gro/'fRN
%rt:[tVb=j<3uF!oA#Sdb%HiA:S!0%7FC/fF8%m@PEQG!3$!E.(d'(Fef';Ph^Tgs`*;=5EVS2pOFGom/.rWGfh?e:+LDHnd8Ida\
%j3T[T>''`<h`h#<gY2,2V<tXR,oQJI=W0N>s7V9*$R(bUiBIc9UPI\^8s6D(Xa44fD;J%BXIZ_^<[U##NdKZF%Go1a8`Rk*7jj%l
%"T0]T]DeomV(Xs!bW[ITJY'59c\DCT:Rdpk4H6]S%q`!/al-+d5isN*K^`OA+9#d>5S[B+SdfppI+EnI#u:XE%8ZCpjHu\.,O$r_
%3'A-A.6NQ\6mTDIcNZMI*8Z:F#u?1hGT^@bEs7W#O#d-)+`X$gP@P\Y2R55'XfMj/2)5W%Vkt.-gOQ3NBu>QSDfhH;?Oi-K7s5"t
%))-qjOq%?@hIpa_i5mq-L.(#ZZ41L,NMI#eg?j'ah/#%(H!@[f>JS.-Lm6V9UXa7i>0U*CV-A4<[A9Rp=u,;MQ[2:(+NON%5=^]s
%4f$apbW\KiLokN/'WRjWRS'M34uk`oSd%;OGZl6EXZ$/GrW&-@&pR5\;"1-?Lkc$Q$'0ZcLIZ^%GI!gnLXRL3On:&HEd0E(poau7
%YSg$JVJ9M6-7G0Sco2MS&.&mo!KVn(204"!4H1]eCE_BUN@"ot.m\`(GqHGB2!J`%K.P\0\eLQg/-BkpJX5f(/;H^tnP,1c2H1S_
%MC0D)"satJUATTMK1p'Z*m/a9fXns]TEbmI+p/u)TJ'tj$u[=aBDLH[JC[&I](@iWe$KW@`eXdV-E%.U/-EM7$kQes'Nbi>g]A?Y
%%KV'@1WYh$\C!W,36i.triQKJ*HKZ+a,:M:K5$70&S;_EgEm50OHeIqcmlj%((!.4$+>X4KARA[Y;u/lHrLJCQ2%]TjSmR#5s]G;
%KE&_H=l!Xi9*OQ,l6Bscg*tH4e2GZ/8DXB`'ch31s#ZP,I&lg&OCPMB`_'jiCsXT5%T'@Dmf@2,3Td/.q+'-D/Jttq5t89l'dEa;
%(\\<koF07,;ni=7KtTeT>#[g)k:KCYr>QhT<QL;fT#<d*l0-fNLQ"+t'`LHuWkg_GGU1p7%Vh2ZqBla!>d1@_8>*fm9!H;QFSQq2
%rCu24lbDs5GH0k57G`^h-fbni,4V6mbPDe64eT^2a_sG*ThTu&%b?J@f?W(%:ZPuaS0_;i_6@&d'h3-,$&Dk20R*\C?f=X,&ri"n
%j,d]V%oCIS"#]!8ZWrqTU-gHI-jL5ua_VHE,$"<+0dSP)$$Fi^c9`k#/]"Uo,iO#Bdbg7^Te=`,RO^o5rZTH=]i&*NMKER2?&EnV
%RAcWSM)rJ7."&j"S]dNlFT'6_)2_=`X.61;iAXH1<MHE$YeT0Kc@u6>?SRPT)U<tf'p81`jG1*"gL2Af7Oja\b*h`?NMfJBbn&LO
%GjK]ogcL0de]TD#Qu64%Z?C-$j<"4]lQ9->^3?VY[fg,iYs?U?iRr]W[:K@Z8?e%>I"rkG%-Rc5nNVD!'2ec+ak,Yq#/98MN<[bF
%pR[?lru0?n[JN56-TaK]j]:d*$Q+$;mR!A5iQ3O-r`u7op(DknP7d81LqH2c<[,BUKXt,dOq:6NJBNX5R"/Z"ce^VM"#n-er\+1b
%$\%sRfY;qK[HFqn?]s.Bn*om*NgcXM)!p*8U!3hWs&Q`:Pi=>q/RV"HWJe<nh&?gco7<m\p>4oq/l29S#N#IsEiqM@[,%qFd`T0H
%N$OeBgW`!b-gB7:YR>"Xg22rs-HUa9A6<;IRWoBUp&?uk1+T-C9!C^qq3Z>DhEt4acN,FppuelBh!7]7ZG?A#h%u:R_33C\C+K<J
%)3#fUC2Z;.%en92K@qgj=\.>8:4*"2Zh^(_M:2'XL84_3?u/c<[<nCY.fUE:bl>QT'>7__0qNgjZT"F<!8ZI^'#o^G["%d=B0J&a
%Qn:mci?k&>;DTj&q7iM$HUF6KAs_HjY]OM3ImH3-"M<[SGQ/8?*Da\u82!qa2!H(mp+KE;Qh9_\MZ91Ym!M9-Y-!Jm^!Yb9RW4bH
%rVsS$J))O.s7>en!Rq$(KH0=25F]nF-iX2<pHL.%pLcX2a06'X6Z[NErBHu7["d\77F2!>W]WB<f0;O7rtef.fkB%<^W2:gAQAJ2
%%sk!llM]>2)Z?jhLtS(F0rpfsWn+p<-d2OOC8EE1oc1u6(Y7nZ_u9DYV<VYkrZg]`$g'(Ag!O2PG]]qA^aK(Ne.#)IF##bZAp]_%
%\/F,=_;$T=]2Tde5PiEF'P&\;->1g,J/78G1L(:Nl2D9:S.+PnIIOZD#%I4S9[)%8)_egebXJN"<[s;R]!-ZFXP6.u6N,#>C8&SF
%6uOoPQ*HP0m+>d8FB7A-\%c;$VqL<F*b]>*ef&2m8aUY=2BUj$9P7O,T&u>l`hpaEH[Ct5FMHD)p!RPk0<c[\d`n]'na*UfbjPL2
%4.HfTCU9,%-ap;%=Nti^G!(Lfm,Vsml"SOE3N]HTp.bikaQ_c%6ubBAD$c>]j[?E.e.7Qm9H)IE_R,*IJJY0k)&6hp0PR'G&mc#[
%'3qsTj:3S[;UVbfCg@+48b\'H]W]j)s4Nn/KGJ$N;R`QVfjO[>TXHrWpRE#/p%F-8iS:sq/"`CDp4m9.[BR+99;E/aLCYub;W=-N
%V[T\!REoYGKSBfjSRF[Q%q\=<0$W,J:lZ4^V!uLLZhZ&kd01UHmMW9#@(/'Y4Mq?FgQPPhN/N^0Yts!iN1Tb*OAgAOmu=PD1J1L"
%KD<q]`*g10/u4Kan)Dt+Mg##1]$BS\[-Y<-ff:"2>TMZ2VDI#l0OHLO(b)U.GijXeNGt$KCd+C0%i1,GP14OaK8QH[9%k61LGc;3
%4dW(fI1&IoPB!;n\(Bh]D#AW$/E8aIZ-+bq`E=,:N%q_=CAl[IBj#^uY;ba+qc32-J(#JK:I/?,5lYcLfL+HfEPX$#:,sYN%]6-@
%B+Mm=W'c%ih&kubLemEpMoiX,T#J-U4:+%!L1?rm18AEAQW1Q'#$1[b74U8;Fog61%;`G(8b%Wc`tn6EAU3oo.?>nE9.M_Y9BE49
%Cc;Wc$C9;>1!4milk66S$dEr/A"A;.$VoNk+-XB!=@TZl\'@c,*C)^1"r!F*4[82tG^-e)PT?+WEB,&IC2Yq4E&ACDinQ&OU.(uU
%SC3i&3;#_Z]5OEoK/NEPFBaql>^9P3/^G^orPnQV01[+\^.@TaSsP['PPAV'/#HMpGp^paU;tE5?^AsP7D`2pjK30&PgTSD&U0BQ
%9fni*lMDn]U;2\&FhX6uVMcGEF4-ZJT7Bj%)IK(ne,9Yq2,W@pZ:_N":T$,,3TX]o>H[9][&@V$Qr-TtO5P*)l?[0e_LS#QHGZ#F
%*9*Qeq?ZpGQ[3AC-L#p;HjcY=3g8a)Sjmh_WNM#47Wj#5b&t9'@KrR@?ebIYet,3X3aEqJq#.^qYDZuab8acYWkc;h17K7'bQ\l]
%4"@.4&-PTp"-<nlp&8>W4<2BdM=`o_\S"FmkN5>b-O7Q:7D4S`_6^i6r1nO_Y*NJ\@XBY,Gr2XuDI/F#58chpcZ//m?9L!ApHA4h
%kO*VPVu-//'NZKtN*M\>!0$^#AGTY.ka*P>:T':YKeuWBL\:6bcmEcH@k:cOC^)Nh^uolL_ET]Pl)]@qlMl!e]eYH@j4UuK%#O+#
%f(/e!nleA4NI%Lh@#%I$?3O(7:QFan0oe?@[EFqRL5T6\'jsXGm!#6BkG/9<T+C*NL$Bi0^5s+(55*n\>?"<H<9N9;oV[o%Mpe8&
%2?_q$U3+jt&^lBpi\5ea2k?MkJ>!lh#31a+&uk&6]e2nsG;[pa&gjOTjs<VPOZH<ZM8V+p<I/a@T%E^,(K`nck]D,))4t^@0\u)3
%cg,+BeQOc-m[o-Z3Aa$b]ch]Lk;E+;4rt^;E+F<E.NJ88(HoAqL+jcm4lZoj)_oR?k:9YOk9/aM#WLoWcJo\;)U*1P49kW`5:Z7T
%,u[gPs50aIi]oY"Wlg$+e*01Y7k@5X\<(f(6JFXmiJjkG%1,bYjFX2SiLO=*L.Zd2_9\:/PLKMV(5Gf3c>.l$Z%$qWZNDXgB;["m
%s2(%`?;W?mq3CN\^g2LglKf/>$RIko)u%[B/<e/82na<5;atJJj0=YmT9JWYnOEO(G.CXcYFdXeRi<s$[$7V*+Zrj&luX.-LfM\"
%M/Z]X*1nU7P`lD;ohYQJf1-2t-hF)@UDUuuXjWYrHB#dlitAf6OM9/)(:$/o%GI"p'E>-D=Z"p#ER5mJU75gpH%[5o"[iV!D\)k2
%(i9e\#D8,'Mq`H&Z['GX:H$t4"`dIR;jLXa?gE^GD']#6fX:O4%UQs,lhD1uh%t^qKsFD9iKjp.T3\1uLdO8;56oMCN'09D%2u)<
%OkU6#mb##[H?'[?H;6IY\M`&]#OB=U+f1E^gFH#79i0V\%UD>rZ.%F^bXHm*a(]:9b9+L3n`e?Q]8&<eo\SK]b&4jsD6?[,S/g?L
%*+.Ca>e.IeZSh+"B@l46V]53lrUi*F*^/\Imrq"RI(hd-l`8<#qE2O<35:n-ZhBIRiSESKqLc!EgZrX!:M9""BB_Q-B)P$ib1*9A
%RPtbL^?Vl)n\It9q!_.q?*E-J>UZYbrrEI+mEYD%lJn(Rqo>$Ms1!BaEAHe(J@G-F4-/IQZVHusHe80M](lhnBceU)H^2-I;u/bm
%IJ)iGA%,Hf]=cWQh>K"mCWDu!lh>&bP<80Df?ZK.:\G<l(ueW[qmVo)m=R(\<-,E1H@PsfGr0F[WK4-rOmb6_IFeA-^@q?a4-L6f
%4_oI/r&TDdDZ"<hmVcEGY3%sO20N$(NXZThHi%GPN;g)&Vn^UqY?"gsr7ck3`qA]<S`YjBhs[YUDSGAB#%tCe^"p8GoUt+1*TM(U
%3u\F\,?$Elme,(OGjYD,iRb41k32[%S#b""T?eG3SJseu!k6`&C`R(`N-t-gbBd[R^Njk_iU[<KeB-m/6`'4q%^O*]^WGm`he,-r
%IX>l((-&40%b/*AftTafh<R?OZf_j#<ppNe,IMr/lL:KoID*&!G4j\2>qL#.6[SEg]_Y1,-=?5C^"r^15M`sJL%9XK^(+.h,]@&/
%B)*_0a]Dt_eYD9s/\,U"o^.)d@:-0$Dr9l_h<8+So5TZ,8:9rmEhOaT9X=E5-Ds)r4R0$$hq$Y$4>Z5+G;m7*gsQ_t-:mY'jNaMj
%)gBd)j26X1UN[7#*pioOnWd;,;[iK8C^O5PUhXdm'#"J]fZM+`QtjDC'3CXiDoD);@.ou2O7GfUZ.o7tVgWOQg!>Xan)h$TgjAWb
%DdS"oVX^tBghn5#%"GG[r,Nm?'Pd1L]AF#a5K`qc)rK;=[nZk9nZpXCna9Uspd<nbE,]jrYgYYCc%(S1^+8l&IhE+4GCH,GCV9#j
%Ib&5jg4*_Ej*5E?!(C:E>(:\Xn_;nr;l)u>n#\h,Sc@*ih3srf<j'BrL_HpGhG:>bXEHj]?FFepa2Z0ul\Fa![E%[1o6EJD3EZ0m
%enKbqgqJ-53RM3Wm8[\7gpjLAN;,M!R[k%_YVn5:[^o6QhmOBDc.\`;#N%Tn#LD[pA8V'NHL';:2+'rt,P(3/*ctG#SDJ!$ak+QP
%GImHBOB9e]%hg]V3ue&FW9^*^-T@]==)YJVO#CV863#3qLAI:O/%<Fie'Zo:k'oMH=M;>EX-uI!&"^2%R)\RcrB"D'*pIjSqr,&B
%?:l-4Hh'HCJF[NP8c"*)?PK..G3@HMkWu*u5,NNF4o(+">sd)7?N#N%7U)gg>^cF6CepTbI=%;QD;Y5>HFru_^44QNNSdJL]1;=n
%5p"A?p^BnVmS7)aSK"Wp;rdPed7sE&bDiC3dlk"6o2bbHk#2TY:6(9)gj&_qWO(eb_Qto-=_I^&iHqs+hqNMUk[!5np&;%[mRH70
%m\`q]A$ig:eh-M%=A27>fh0haa"+(*cIrr?&t/TWYAa/E[Qr^_R;S>WSSbGjr:qu;4JfM8cms0[#QtW\()#]cml]6m*J"+V?PQ:Y
%2YtqUq7bCbDft+;qV'D!*Kkf"$hg6?UWG]kI;A2>mIKb4&u//'jCE\m^OO-X=feRr5--nrfbuC6XEQPTRX\L:SunN!^lSG+nr2rp
%b\p]-*btK;r?K+(lS6BhS+Hk"'.<2#0;#?d[bR36i3up:gO*NrG9rW89Q$aK8GDm:r:Zn&P1[^N[MVd_VM[1(@SYY=4<j@p(L+rW
%D+fn_$)s\)J-[XEe<I7,Z>MOD$taRUH;QElH'q<sk]3ZY29VOpZtU9Sq"-QBHu&_%%8slb$pQp5@W#*>.ppmK,M-6j9JA$rGk6X4
%j_H(p(Q0`N<d"<=C1EK3+r$5IH/eT&UtYI5*][793+C<i5E4$OpgDL-6nGC`AX\><@"*0"g:)c#;)Y@iQAERAZLRHW2m-5DQUQAN
%$S&$2?`(EQ%*+L/esNt1Y9Y5fXXt%ce&iD\O)0A2O!6TH[[IPQH;l:-o/!5WIq80u1g.(t%JqhPP9-)gV(u(-nMA[I=B)9$+1?#?
%_6:0A6D5R*^GhF9,gEfIprM[Z@I(ZSN79De_M2d#docGuq9o42<PjW\]&*?ioEfFpG2GJ&GLg[BG$uA0ON.6SDN(:`4R@7*5Q>];
%F6.Qc]<u1RG<^9m_!3fHBA1Dln#jAbC^n..9;=cgdkL99es&,0Zb#fZnj%B-cL*5VpBKDMZ%noFe]9.^>9860DbY/"09(pp8p=rb
%J-3d&0Gs\s<p6lRX6X\BXu+o1U[ApHL,uY=1$ZTqDPnZ/n%EF">o@!d4Su?=0"gS"QIAo2GLkAHeK=1\4'+jZ4:#Fm*5%#DSUBX!
%fA,.CC_(E%FK)jSY-0pXDmukhR6#/5gAT^WhRrNl\o2NTRGm\,7opeFF'^4'[`!"[\nQQ5rs>#1MCEi$s!'-R'N=S&WH*/5_4H*n
%pVp"c_3e`u\?j"ZS@BedR]snn6lfPR!*c83m>&uJ)S9_P<a\qK$D#q<?.nSGD1&M`Yugo%Z.EOl?C7!UDnZXOOfSIr[W?Asr<`+?
%j(HP74A5_LFT-7M;Idgm5I04F]t&T.rP_D?4CV@!%p*[42H')qq`/@QHh[LXW6q0.JTFYHD25=>kL]o__Og/^G?Xkk+%Z+-N(0$?
%?FDqTp;$"iCYL&OdWZ4'K-#\s"KLY%Qm3gJ8TQ-f5D<N6#R&r?8lo(dq1>(t3G8k76eOY*rNr-P]"7\OPMC6!7NXRP:E01Vs"!^Z
%]r1,h#Ih/s6#qJTA<\?D:Y6F#Z1IU'=04]3p>M&[Vgf[lnKMoo`s+1odWV5Krr>W;3)/#^>gZ#<mU!O"l/Bcf3bU_5]l@FdGaZlJ
%p$#CuGGV-o"3SpcFF*S6hgbXn1$.sKH2QS^%Yer0Q5o,>V@>5LI/s(,D*Dh-ZY%)B^7"d?nWu9Rd8+*gqSBL<s'h>pX:H7n&ANR=
%ODI)YirLjHIcnQ(r?E&7`ir`;l$mp)(q0%!=cUIs+-3V6N]pg\%qE@mh[5e'T/D\%hgn)Pp&QhT_q4$jqX@+%5olX>'W196PufW-
%UHt*OL0$Rp"9[D+eP<7f2)b<O5AsAVkT<aZl$PYH\CkT/g&ud&jOK,"pJa%g=Bk`QX%?gdHd?&KDICa-70T6X/]pe?\YN8iMn*+k
%NM!@OQ\\>I=HiEV1HDt()TS(m)F$6r4od`j[>*MkBRQ,M-`q$VEg@PRLc+U,F4`PMe,kVrcbD-q>Drc6pi>+9H1^^HKHC]-XT*\'
%+1SblH.L(2:(L&i!/+bseDp$cqk/C,(m[A@Ra.)@:J]Ph(hht/<c>20U)Yg!-u8S&dtaR+nQC87+as4_An/=CEi32m]t_.-s2FL^
%FC@K39`4S'e(=%-lHB1)NOtD;B+99-F?=_*2I]40pm:#HMBni#oYu5r+S1'CCY>N.#tB$Bn*Oc6-4a;;O..,:%/I3Bft[+cY[(l>
%"'bc\f&9J='aF"TJ)i[%:-WX_h+J7:a2]>;F8s5<KAji,mZ!i-pP(_r:\jF<CHJ)*=)Yb>I+rP_0tt>&:&a,E@q\7.#6pfl6@KlJ
%3E!'KONW8n6XGi<TB+_KqK,`02.#*V+#I'f%o,cohIlYL(S+bP[ccRJZ$lYHHfs@o(]3Uu'7DeR%5hBnJR7@@7b'eqf6H91c(fVU
%K<O0<*eWZ.[,I3!TUu$ff7,^3"0bJPeW&*0F]kkP+WV%TmN49W4ZbUQVYk`.6+W.gZu`qPm22(.qpX-ZNW.rWUA\p"b)Y>mrhHe`
%gZnd2FMZT\b#3$Ma#.T(nbr_(d6,*H((`R>EURT>mD58=[e+;#2VP8#4Sb^h@COf!:VU]]h,iA-q68Q,ptA<s1gW=iG<Ku.D+!TR
%p==&,%!jPl:TcqXr2h]&ntoKI?C@n9(EhD3n#u&Pc]&O8F8L7Cp$V\&fIaS>h#kF#Hb5t85A71VJ+n#_hIYB5Z.kWs#[T!@Il>7t
%q6;Z'HM])d!c+A+//"@@%qTAE`UqIKUd%'[7-3rN[?Sb5IfL(5_f[uMp:g@fq?/H&=<6;Tokr?u%#.95O4Vu)S\AdM\bBoWA+-:V
%bEBMlIc8idqo=H#9ZYJV=$*P(QUCPQqQ86'I\'RU1V:7_=l"K5b4FPiX<(%#lK8f>>X#P[K9m`fQl1rT8"m?+69j4A*JsU#MkQ^N
%j36CDjNq>JSo*8n/Iu=:*Ib)]IVXC<IsZ#r0BheIRO6bFqY2A:1RdCkHN-A;FrPAVEo][;fU74-[L[7<*T^c,i#U)'4;`J%5,o/4
%M;?i3`]Ej;Dr9ccReer=E%f#cCJ6[5h`n6]XkI,HCEHm]quOea/,bIA]X?<]*c7I4jS$FJ:"jN(4b*&E%-uAB&FE7h8<'-cP/dPP
%p?A#c^&%2)*!#(rk2:Brs5)UYR&(a/?g`>V+7,$R+lB]*m;J&"!"/\Ar@L*R"p9]qN9KDB*m*l^nT*&BeM"kM/SLI?CN)U!FrO&g
%4tJ2F&*"\HDb&[Q6:P9EDIi@nmDeJ^oCg2\_7,2b`BYoeU0g7EP.]N4^K]%-b*L9>I\^@.\2QA(=*5ANO3[>9fFG%Wes1ku=Y\pr
%furK&4F4n()WL9Q\$PYlM2m<kkGW2JrN:"'.DRNSDn[S<rSGR\C\[C=%Q$>La7ET;=,q^ggYc,V<nj+5kS;ohNnT,nYCAC;?[Y>U
%!GAD-4RNDrirhK!GLu1P_p2nDD!^MZ*d$*\ekFMIK4\*7-rqK4I[#o]^D*MaIOo21<t:YU4`'KQ?@Nd!2"dI&`L@r/1;/*j"%nZA
%ocN#8\,"R,i'7IO$iLML"4I&A4+.&"'ZBu`F27t3h)P[?nS;Nd4s,!_:1!.D^"(,CY<Y94h1#t.g;L8Z\W4\Te#TYojkp:0h`*RN
%0'X\!^r#lgp%G%b.[l+%Y&sX5?1o<C]&Oh';Jr+m.Nmt2Wm$8[(bh>H0+-O(&`XgCVZRjR,[2s#Ki)55N6LP.8j6sLl5QM\O!!-B
%mEPT2oCgbX8dDK6k5*igc!I;&lB1/_hO*3Q]]+h*3[=B^>kJmtNf0pA$d(AFfidlRI]$9Af@M)8]?iInqOL[eKZ/[jlYLGZ?M_N7
%IbNN2hr!nkhLG'<n#Z-ZCO-'Mro<>X@SAL'_hm^$nL#;DXFShb]di3kjpsQ27eM,I@Z68SB=HFiYBP02<@eM\G&*V!-/lNA^Njmp
%ft1nk)YoTMgaka9^"XL04W061lc8o"<M,Cdo3p(je`54Z'W=6HTc8K_YJ&)mK(,l?iFf6E8U^e0]@4AO\+LMi+fVoQ2OO&3b+D@O
%TGU9N+8rjceaBnma6hX!Hi<ifmpr%U4`C)r^9^hr9R67%\ZiSOqkMmDIW^Oc3)HQWa`mP:RA$\<qQX@f9QH;6hmi9^Z*>sU^MCJt
%+7_)*+NF$G./mkB]Y+&O@oY#B8!D\WR).7hXcH[u\.^apQa7q-"njlnifNO`FA3j[2NQTOIr'N!msV:YEaj@6`p5-R].B_=0+@6>
%m<3C)HEoslI<b''mD7`[N<^'mp>-<dK8r'?qIK?Tm:SW,8Xt5??23ZT`p;%5^3TlJirZ3uYBR'.>%P<A53BIq)QtOEn!G14A$snb
%KZgmo)e`iaq.aKt=kW/DaZ%uOpHT,Dgb"7e-&fAq=#%ShR)4#*+5]=fGm(gYm&c=QYF`5<r2;PIl1:6;IPe^Bq:P,rO$6TW/tX.A
%?T#".-D-9o;S/k(G/.Dk@mfQ0CH"3KB7GGmd@?gpP1<,T!j=dpKmpCs2dS\[r=0Y/$pfVcc:\?;>e\V\VE)?CQo#:R@W;bnI=8QO
%C%"ne]J>P]o`rfLc9^7R^+[)!O5qh\5G*.;68;9=GFh"??Z'`ea+?:b*c-KIUY_PhAALqTMq6hRAXSO";u@:`%)62"Zef9jSW3R?
%dh&-S]6i,cl`BGZ=]+XB],sQmTJp!O&.!r,jn96AH6D+q+1"Eph)Db3^>h)7("eKtoK)lDc^Ssg?]V7g##_">]lml?L1fsYbm0fr
%okFErj-<ij_7.tXpRZm6.F9I!i\NcDhe@MLI2BtM[0fq6IKhQWGiq+$fdHQgWKZ1`IRf%Nh>@<=H$ZpuoC8rls6l_eBX5.XY"a[d
%>]RmEk%Jj+q\gg1g4*c0@b&V">`ZDNmX4?mB(L5!4hNE7S;!XhFiuCtDbSL37cRD8:5:4CEUi9>d_6bB?8a7g8(T;.h,p*]Dgg@k
%C`QY`,jWn,9%WJ7Rlh%7?XL1lY)mu(r#Hr7[*=Mpl5#3tT">4GdW/%I<qBWA>JFqIr3RoMh3n#Wqn;6>CWg#3h.c?Me.]'lHSh,K
%SS*T/r+Jp5gIZ0:H\5Yl?Uo`gD:\RtV7\aiTc2^\n!l/k]'`a?L+gGJ=EeLM^%Q&-)8jdgq6#hL?^%hMkm0JDN,+(E+hf*T9W!TY
%iOCccS*t*S#2ZIJ_*3K+Yd66[?q1)\D+J:EoP1.mq<fmu?Nk1,)YVFT(c+8])[P<=fZ`i(*&9;rg[[Tdc@G3%5p0i#X.>62n\"/`
%'%M1gL7J.iiG#Zjq#'dXkiTW4f^A)`at@OLoV[ndhV?nkGc?:F0OSq)A=UsF`geX/RZ-uTLZ7G[2!j^>kSMdA-^R\UgCn7Po<nm0
%FJ-X:E\9Q3A''b'?T9u5/C!*.B=0:im)93h/FP=;LV(s%6^MJFD6jU[F5.!p._!JPCj.=*!Un:epPYmBZ6t]4mX]Dtm[WZ1@@bMb
%rYc[RhiZkj0T17e(2\D%i72D]_BWs^U0qO--2%-1A3B)u9d_<@2Ad<Qbj)OnpbJBDOo*=/4dl$CWr+7[ntO"j52>,u9$<./#4KeA
%]16K]HfNt%j;Rm36<[eFi2*Ej9)Sg2j`4[uoqIYA/h1N@JSEY@^M9q#Xg!euagmlbKB9#[/'q#FND?`@c^/oKV[%</WZ(%!dI%0"
%=-n@Q]3<a3&!oiIJjoUFEXRo[H*.T9)oSE*GlK`fQVpenF5#Utj]O&lbB@ikrUP1&=V9hT9o5hW[.6jmQ>1uQg@ZBq35ElV%R<+j
%q25=R+1?W;frMU%SnC/%Hh'gS<KX&e@=6L(n'mm-2B87!RJ5=Yj'!qP90//$(BahD88A"WQ61(#bg#:Xnl]E`@t4%R]3p7q@l2mW
%@($F^<Z@Mc`m*I1\=!ghDg/4EVepDV*F4n-\qC/=hd3g0Rp9-<m0\b(2HRK0d_(kQ;8X@%iCA+\pYT""FcG4WFiQ>-LItMdT_rE.
%%AS96qAZ4g6%K.l;Ld`91a8XNnDY.n+QiX;IfJg%S/Z)nEIeNS(W\.6:k+)K&h]j5#dlVC':,2A'tum,rO:NLnfaf*P1O9FC9(K<
%Vd!]9:o3`oOD,V0VK?#)>/a=0a?%Yq/3nV/%8`V;]T>t?1S.3j\B6@eAdK\Q@o4g/=0$YMT`%n+Y:Cr%D.HMTph<_o,uh%/)HiC6
%a]>^MZ<SV"+E&\1K[cq?(r-ODo!FEY9Z7S(/+S@[4p;k14O+K\TO/sI9F3s8QTU@''p2W^:\.DpXp#QHSDafc"I[S6Ua>N@g`HEo
%7N,,SRMH%Cl^B,F:";8MR;'K"am0RT.Gu4cM\q;D:@fGjQ"M3TJEV<B6dEJ/TSsFQ_mKJt,qM"*_:IV6#)]\^O=SF\Ooj7.P/n;S
%jUu5u1ao&t1R<QuN%C?n+H_aWR`i'-LsS6f"Sg8eD6X_UWg\&<eX#k:ASID1%n1Bd"`otJGRQIP=eZAg[0Fot'L6%g(V(iXeHH'3
%,kW.!K=NIro3I5CZt+<ld'C*KfAZ`bASGRq"jI5.JF9Y[8ca`cc;CZF;WimI(5;JA+ChIXT(!_AV-BAV;Db,%m[8]t(iV-pRF,]h
%5L5.7%D'WV/JZ3&#nSWl)O^t&$ciQZc\?OW'V92R^.ZiUX0bJKa?!nZLdG3!^c4%+hJ.q*+ar0<7NFIoTL+KW+>mUX5RLOj%e?9M
%OJjO5EFVtGN*/c(_]!Bc6]GnsOPYp"'P'D,-PC0Yb.>YZ'-[R<(+=sCEt6EW\kkLJfm/Y[58.(U$33V<a_DD6%Pg):eh]lU_kP'R
%ah[Vl/G`W1SUn=`;'?N^M(q"OeBpE/U98s=&C6"pNJ"l$'f%F_[X_7+N/FQPXrLt*dl_AD5enRT*\m'&TPqX&V][66g4GOl=>T*(
%W@VV22YTO>gcRnF@EA]78R6%j=!4Y4WsP2Udu_GM@.,;3!ce=\;S[+/2\a-8lMb0O<)0)id;f"deX@jd(Rn._B&AuYQIX^'^P0hl
%/40jH1$'ic?844+&.Da5!U!%`TR0,<"-$hXPN@H=^_R24aNRf0'\(lb%^i%VL$UT_j[K[VEG7,b*@_)/?>-",mjsaN_SBQ!W?fPl
%&8Rsc-!l-f'L?r+)(YjtDnGBV]+9RgPqpWV250btrm24;?32uB0c;,'*,LrP+IG6&5b2OJILGeF$";1JUd>rX7gr9r+p!FYfYR].
%X<\SAQ0j=F8]H"WMX@P2el]/QeeTO`ULfQr:K.JOhU!YOR%L_gJVD8[k9'q1!I5lm`An9^D5Cuei=9q[9s?1.P>^k3.McY7@o;JF
%D!?n!N2j3\o6rPa@TPtZ*4pH;<'X3prNMhg%NQ>J(06U2YRGFh7<^L!G^4(B0MP9#=KW<Q`ZS3JV.=;V&Q9QNX;q2Be3I2g=TA_6
%$AW10!A\#7o>m?A;s&\m&A64\&NONnaR'%fBen/i]?8?G%5q*<8t(@PR7gJ%`\M6^E&+@Q$Pi,3o:tN[6,RZ%gk=[tc@YKhfa=Kc
%,0R'_-FD'gL8(,EB-X`F2<hpL9l7qhOAbs9'b;-@]c:<k/1JJpE@Do1<0RNa-&@6JT*rW:,QW(U.8piqJj+t0ON(c4KjiK'k1G7l
%ZP!=o6#gf#/>LY0I09d)2'kP,R+A;&hQLN_6,9-t8i&(nmWPfYd85tn!-*7CZ0;gjSHHVpE"ikFGHOVfEA1qR$'YPYO#45Ce0[l;
%/2K+rl>m!S$#'he_h;U8LBS?SRT<"jd&,tORmU;01/=3i+b]Z]8ak5_&hoH:Jl6E*_ALafSqO#S[SZ:="XaX^;YVlp7eLg>%GFZb
%MCg?<Pu(:TNNa\MUp27ETO91%QP,KZ'W=SS[3]9hc,iV/hENA<06:r4qmd9jD'?oa.7@i^[3XHKiY7J"5lsbIWQ?.\p*rgK6Qs5n
%BadZ:I^pJWiPibG#,]aTN8Y4(RJAr]>h,ihhQLOIj&bH3JW59Z/C5l7=j&+jYDH\L"W5u#17-XQjlA#t%#3%gcYXm1(k`Sm<OUI*
%92J/9,c^"Mp.4)Pq+412Qqs*%T:Y%2d8>W1(7-&XT$3:-<1S'Cqc1igL_k0%N*HqD(siu__137S3hG:1a1;XF11iD-jjo"AcF-<I
%SCKk4AGc\+bdUtCZqbIfY;e>O,aZNq"VD2L)@.6oeont+SsaOd_Mp]Ka-$!4/SC[0/A]lX]T%]O:M)^(n,nC/%ar;\YRmTZ$aoD(
%o"o@Gi:5c6QQ.GC)BCq((b1_D5UIl0kCTij1J@pTV.#$V`^#)`cTuSTG,17`m_IE_on89OSs#*_JKo&DN-pph'.E4YF2r4k\nDM&
%Wbfi:p"Xfi@"P'MKPA5dPPB/T$+Y2IJ0Kq?""Z/QGoIl/R[=@qa\t%d'c$1=o4(W8("sR/(,;%)+k&caTOam((L)roGJM?1%@L*b
%,F/W>]fiU'+?Nt`7%W_MQiX7\R<1!B(mn0FB6ki60HL82(9Ae@BYq8rDl4!\Gg`P/OjYd]]jJmC76+;p1g<Ps'_YtRT[5Gj0$aYR
%[%P9ol>p!DCe0)CgW*cS4g#ZhGj3$S;IsI!*6B)lXsjMVK1Jn<.5M]s0(LpDWQU-P*,,Jp6HAqQ@6#o<*pZNhebdl:.=/&Gl:N%j
%4'r^,'[Zm$#W?1\PdDFo"E@:-N,3%iL"jJk8V6C$>+DDh_3EHq\[!5b/.pb'D*IY".JP;k+iAgFb)Tk*B#l`,Vd/\>'f.="Q%P0r
%<YrS8bDh?(ON_M")b+J;RN=!OM\1p.(%RJRL+&UEihNY]L\0D9_Y=106L\QoP/Rh3<[c_?&XbgU?^X6?qhn.HE$2B38MCg;IOK<O
%-T2I/F#.d[5T)=ofTI^?lpPh@V#i);ll\>Ta'&6NWi!$7ffTr@b.rX=G%@1U4?)8u1GV^=+C&.O3uQ>7j/q*=0hJ`H.2>cn"IRU#
%LP?$ObC)@A8[;kl7?U8YkXAs4&n!DIoGq_@k,iBQFN[,]HTX!ER;!*M/[tg>(]eA4[!Ulrck&5##34-b1BJ?(4qUJ)OgZcM`()M6
%Bkj.@E.]SR$WTRk,<aMOk"]Qr#t]XJ@G:FM)D%;EEQD)<,l!^rkGeJ$\cckBBB\Uu(I]38g&MMGSl"JMLkh,&nA,ebM!576[@.um
%),FLUT*X`k'fjmGjCbs_\`K>dGd-^0Y&.,RUMpOG2BIfIDU]7\D!DMGX^E\\7u''H"OTo$$,J,I*HfF7C6LCk6b9R-Y%-M7Fs]>p
%D#Xr3<80Q5Ln:J\\0_tVs2q![Xc-\dA5hcXKGb$N3OqG+.27YqEf9_/]dYt;__I(nMYU[g8ZRQ.23&,GJOoD;)+?/FAJTRJWc!\\
%9.:i!)S9iTo>Gg.3HoA,Q!t<Q9TY]gBofOOp-l47+i9K.,b;(]``Ym?BNSq<VG7D:@$N$,@3s>*08h\_S`M2pf)X;2@7DkU;p\=]
%asmR&6=qbs+3r/'dc[:!MbIndo<QGP:`8OUSaAMD+6D2bT=jQD^-tlC,1D=MVTouO*t1Au/fB)A8g`sBN'9ipcW&T]"#Cf.=`!^F
%c(=HWd76s/H!3-&^`(>=.)K2:KlQ,u.p2b(MRP(g;2g;\*4;1-Ai`_i]ge6\;s7`OoGD"qB"pk>do;Ygn4d`?.=si%^j@oU*g'CB
%"PQpl1E=6q:R2rbA&pSFr.a17<E^V:1fVt"j\q;oGe,Y2'YRg)>jr[;3@*2h6Qfu#"7C!.D+V93\EtOfYn6:fU-n--0s1rG,83_J
%bU=c0WL<2b:nd"P7b(Jl-;BZY.3sWD0IY%agAugGKaH0qVcH[*RB0"7>aemk3m12B>1ArL$0"p7E;_&(@(mW0aats71M\+`MQBk+
%jK2$?.!@FT(DsX?*Z-P%mp+nbRLKb'g6c,^J<V@bX`fNdAXH.n0d4O8o0R?9>qT8ZYRtUYWTH,(%IT-28Ma,qKCP_\fJAR'4mN)X
%cc0fnR2m,!S--0%Ec":c.7S%=C&i@mKo=Z8?Z'/p`5M,KUti2kohlQFF)FQ!<$<D[L*S+FcO^>S;J,$r!LAm<Ne'm>'Jo=s^,cj,
%(sdFd0SrEMWkcit#&dMb5s\0u(<1En\_KrMj(ON)j$#HYa1/'+do"sk`)rg77G(]`KB4Sk:kZrl,hP)P(M4BC<<*=l75+@sW'&95
%A"?BRGaYIga6JGIQ7g\)m@5\_/2KZJ8>?dZ_HBd3r.GeY6pM+0G+c6'fS_+62]k^,=a*S(CM^p#:6dW/f&!+(OdLZL[u1Tk,YJ?+
%i[#qgi,('S/9He2[`K8dh5V4l[tXn?,\@80:3JZG#faChFE-oHeE9EoHi<jkH(;lW.a7];$<>U8fg,s5:ra2\&T\@eP0#:L31<,X
%NIUl]ABrCe8N_crj'%kX1t`0U[`iHUkpJp9c]Qc\^q!C4*)l(hdqGF/c&/dr,^$@jRZU#ie[Z-G=gq#_&ftUsF8[@;_Lg7@`m4l7
%#5Vd,%qQP'/TADr99\Wbj]p0.3cG<L*9YhF%N+bDS5U4`!ciAIoER8WH;\qM5q=62B@Wc^2^a(_=0,p=b.M^e">6$-5'V0;-n'>#
%ip'sfE%$Jna>27uUkF:2<&R8\_)]@jcN&!UacX!@*45%Ar$\;\62^lX%NQ.=!f64Y^?9/2.-qnqM(p31Z4*BNIT1o)4em$[58O(J
%YN57@&5qHa*Q)b(kf*46VW/IP"%`D*_PtB^$SaD/,n*aI7\:@?0fCP$0FAd&9hik6/qdr]MVnmZ0G#RE645Lb$)\!N'#b;,'$#0T
%jou'JcilbfR$kDD(u?#rQbYj<Fo[><OV7`so.j-[g/?i6dZFn1JR`AK@@T-_/'nDgp9F'5=JmEPJ2+_2)DLpqk@tDp@hlqf`&[p(
%j'WPnPi:ttZn&Nqc7*X`Yf><<Q4N,71=]tS"CX;N^5+)h)LZ?#D))i6XW=7bN@5DO6ka:(`@SJL@QCupmVAgdj#F`RU8#47<]'<)
%W+%I/'/HGUTpr&N<6LU+R$JHjT"$lr,E@>'Le36H8<Fbu/5t=JL/M1\(Umc'_VfF0;+i.PBu2&""Cg;akE5*J;JB+6,"_*(=AkM1
%&k[m''_L3+iPjIgRe6/khQKt[mS_\!<s"U#H3('>n6]de,/aC7NF9W="X3OA?>-?]!FqO?#U;=HjbFuCUCrOWp)$eh9$6XX:ejL1
%'BLpj2$Fb/pGp'SCPp<(FB6H`YRG15j,tV1'%OI`>M)qaZiJk7L6;U>!`9Hn=7^RA'Wu0[>[38K=/e%s*:m':D+Y@?g;\2C(p_2<
%J#P.fgN&g8N=3UJ8Kq]=0cX5/$jW+;,NKD<)+k7',HB61XpV#Fn<FFd"eGjc*7h=Ul=_VOeJ>[=&cCp7><'..8t&]nALt_6h5/*k
%PE9AaD#l+<Pno(^!%au*6q!6V8o<PF;Hneo![g?,&S>]+22/*HBE>PaN>gXE,a&[rorGVa=pc>ScOJ*riiro`=I:h>@pt!E!Y/dq
%'fPX[,:jV=(lj8$L97[K"aOO7BSqM'CKr1-dupqT)WS-9O95u^V9%YJ+t-@J(lhQTJjWg26%LD7VHAO&\2me#=1*`<\#$P&<]K(a
%=^cF/@P"h%&KG$6,&F?"<0F`-&Q,eJN[c)SiJ9uILVV)0;??C&>6N![>7CD_L6;U>!`<t+<l*D8;YZp[L=D]ZgVKU='>;]3=O?kG
%Gp8e4_RW9,TbU+.dC@,XA$Jo^34RHF+brU_I7XUd>LEe;/8:(>\qYf!9*.[#l;r"JoP7r?R4<=Y@8*.<\B5Kj[9VY4dY0t=#-SlQ
%K3J-WP`!jug/Pmen43/*@p4!CA3rS=%%!)34/c`G/.G]UdHe\iZ>hU=MBoNdaDe5?8B,@9(tXfp\9J'0AL<fW"/"G[XXOgJ;ZNEL
%>2\1?mYoQ!/3n2MJ0:;k=A8rgLU,-3$);HlJA)M+3DH(OG"ag`L`le_.5'Ko'VL`$r?fdK1Mpb$E7I<jh.rS6#XF8_]3;Xq8sBYA
%$+&F$CZ3bo;c46p_,DEZAX\l`3,+Rro&n*0g/S@df,V7NT+g33XanNp3sWYB--Rh@>\8m[:;en+)\C#/&qrfVK#O@k86B;rOJQr"
%B#'/-8nPBRObGQl;jtVrjC:4fg9@NQ/NYd`3AH&MJ*&@b@A6/EK0j?04Cq^WNmG`/E@`PsRY5_+d/n>+24ua$S0U#"2.Ci#0gR0"
%ppHhbGtrNdG%A`O$5GTfo)i#_/$jh$ioIP98oTrO1GYg=/)d@rE.o_E@@]T@/?BRTMm<aMUsU;%G8/G>U]ORpVcL3k`IfSG-88o9
%ldU&ppG%d<`%fF#@H0WSHZHGAaMNI95EsWsG(oJ-]SL!d1j+88LN1.QmTdg7%,')X#a[5Tq$\VN\2Fnr!P-70jjRhX=F`mWcHKlg
%T*+IF$YB)tH1!a+*K`GkLoVBE(hh2%%&dQB^RDJ:d3O[t,\HU6;uFQpLDZ"*)\sDeZCU.m_8b/.*#9>ES0IU.K7e0gT@PXO(;[M:
%MdgJ#7>@_MYqUBj`KaR]BJC<!OL45u_]rq$P9``[*69s/`T*+jbS&HM<g7!!Ki&/"[7(-rVF8WC$<-"B"lM(%CPE4-@_TE-"j^kI
%])l/7(D9<(fi1G)ncF+m++7'=UupH&]"kV9o<)cLd8Kb4e.L]9M$[F.>j:SO6,dAfNbgYA$5<"i-p^b#*CdP/1"A]$A#m`V$p9J!
%5A<LOBE;-N8W4#!.#b'?Ure_ZZ$q7Q&!),-:5Ck717Q/IP]7ua0d=bo":a^u0Ijn@>@[D58V&;u4RH3j\h_'jE+LVGP1VJj70>tn
%D767JLF0`+]i>)CB"roog_>]OKP@iV^o\6t"aE$sBFRSgf*P%^ZT/'_c&?`L,S<!)>"lFl+KZ$LeW`&hQRFA?\2W(lW8tJJNr4'W
%Rk)%c6tSnm5eYtkb&Pgg[F)?]:>3h9%#;htlLWfUPB'6\+#'7*Mh.(/j1F%3J]%:_h#$H5`^sd/-;^AFCZ.C^PA$V[gglN/M8aKD
%4;%jHZ!5%pnT,N(V$T[rKr$cT6\*c@fL"acErfT=%U]=\R7a7#SaCq;JOP98/Y&=/\q)IB#5e'3Q@=e4R`R![e!Bqp2,!HZ?X0aA
%*gpL]Kc^j^qfi1C)29EH`@.g'BN;Q26ptm*Em8THIi:7)@aG*+((:%F-DmoI"SJmb/4uBfT$4:K$\A[e@XQ?A^^L=oB(k#;HG<Xe
%\kCuaDjBPr$rs]5asnSN:(r4!S=mf3PN#aelemD9>H(3=P"(!D=IM9D5uZqJSU]sOOUmT'Pb;DR:n9)(3#6P*Tf;:FZ`BVin0mi?
%EJnL>4\tQOEs".ffnG&dl^X"DU1-0#L$K&!Wr^m]P-5iQI@]5GYiWE$(+9;'GMlV=Q@27?R7.m>hQi;P-[?)R0o7Cd6q!JrQ!LHS
%C4S-L#!]i)QmlN_I0?goN*ZY4VWnd-UE7U`ge#4<9>Ooo#i+=R89%!Ail4/ObG8rq\#O$"fChYNa@Ti(EOMKe4;d".Y1*6]no0p2
%,MUVKq44BHTqepM^BCuM382?B!^)ZgkWhmI*GDH[i6h[k;1k<nS(WdV*K*;0L;08@6=;@6->(LmN!Z!S1XkP/`ng4@cDJN60!41m
%#=ZdgQr;@MIXmQQFI6:sJk'q0\CN#b]BsSOUb(VX.n=8:.k2uUQDg,Jgqp3$UBT<#<oRTU4>;j>kV#ATg_(9g8J/Ja[3uHYd_b1?
%7j9OM&n==k>?bKDRTIdOSqrgH)+Zk>S_Z"Km)68=Foa,gfQi#&8nLmc(=:ItG-.CXZKQA`qjsar&-M#FOQ0C,=Ys`&&N818Q%l[B
%cuXgtY,,8HFD_7'.'F$c7i&N(ZJfkpgIu^oPSj#9N*qePX_aj87^5f;"-mmSMn*!S0'f&$b]q?BWc=R9O'p+pOc$2+%QFMh-JI\k
%+t1VYP$7QpS'k<0lesBFe.oSc_.*5_Ba3'dh`sRX=>WTr'FPo"UI]'XBCn3eXAru>PSacJ%5;\"ALt0U`ir``*t#l=Z=[*I+N\&h
%p7?^<O">*_)Wfm;&sX/@6r]#@['/1)&/1t]0r))p^hr,n)=EHmkD`#-e&i.Vc0qLG_-JQi<e(GkBgF5JUc^;>QDdh],R\uO^hsO4
%=,F_XTKE^*Mdifc3Oij5X-6Bj:A:N8,)AeTHR6/eF21J\PB=J&j$!P"UD7"#**oPnmQIh`aC/sPQ8MnWG%T'h31iQK+FQg97V?nT
%*HqOEQs,11;L:1Q1&n=t2lhZW=cL"ER&<fZ&`qq4Q`-Poo<K:P-l-Mtm[ct$BP2MP#YEG]o``(UFI;;dY_T%bb/#=W6/0[Eb/&;U
%;+Uep7$Y@^,$SR0ei*:>JLff<jK-SWi3pQ^!9$>h;@YAt8W-bL_ua9J>j1khYjIN>8\X(gE2?0k>-toGK+qC];FHQ]P_e+3L![?!
%#HQ,RoWZ2MKugX;E:]#kaqugSm?p%+c,1ZnRBV7I(rk#T1p>SqgoR\57kY">BME4'G$1Mt;0D@JP9^YD![W$c=,p.?=olM1$?o^`
%m+9l*mP'Gc#'?3Kd4/`]YI("BDQ4''C=-/7n?BDJ0066CpV;)"&7@W)`=@*$(rj*G2D#VrCG9EhCiE8meh9(`%dk+'e0kR*_biu+
%ZUC([J?)#G"Gb]?8S"@n;Z]Ytl<!OuZj\Oo"'(f@E9Fmh&.X`r#S\RGAS"QofgVa'^_L_Sbc:dp[6')c2$@eG0l+6#`>0t`(*";4
%_Q_)I]Q[Uk`I^3bM52s][tC`sBE<:!odq6T`7*eOIPk3=9Aq@k&DShT/%((`@o`qqX;@@]c8ZGN\LB5TK7TS6>Mp@Rn3&USJq9]V
%aN\->V/UCQ/YX3d.mllLF%#\Z>^'0r.7L2:Di9E!SgK6#Wjt/o$<OV=a!H]h0=M,$7D8kg$XGSm*"S"O_r5VG`o)q;-)$1bbTM*H
%O)&il)H8Oi%P+r@K1cD@:dg9Zq+dh$'b-BPWh^K7$73ZIC?nN5]S_Pd=ML<,h5,'j@q9g,Q!WZ+**e:j82Lrn):Ng;8%CKrNe$A7
%CN*M[bgJgnE*R6pU(=sq**0@C%PG.YPXFA?-n3/lW01c&.WcKbPd@*!6sL%L(5oT#q:]*]8)"p[W0jSo\"AFqPss`l(Y(1^ar&%C
%?GAIMU\_Nr;559kek`Ne!"Q!W9G@\M%VldaE"7%Y/JeEn3J9YK0<'I6;5F:5<C-IY@6e[@6U@:kJKtWr.p:S3L6e:EXG'-O\#1lJ
%lu@!g7T+RbM[a+F^=3^mp,pI?%=r84%Ps#HS5t($KnaPKW?E6d)G*FZ"?u[F,0\c8E^SJ/PXa)p[\9M4PsCSO>1J#f/qp?0K6f^5
%bH9a]R$Z;GL005PU(4FBf8)N,\37)a<4^Epe=Xil>f1!H\-Bcmg*GfXa<C'$QP<k!PZilY`/[:i;f,eM[\U^(5a9/ieU/AhKr[l]
%q1M)$>Jn:2f!)b'8f7A]r?C"<=3T[FS]I>)aO<IkTVohoU6-YD7mfY_D:2<t\C:[g@S*C3E^Z0r_c<Dc)SWYRUqi6\Pf*@JI-iP?
%.pE+28nkl`)A\?9N$Ba:La$G$:aJb',:L65WT\;@Q\-dpLHt!L7Gf#:aTY?!P*T8rb/*[)PS@PlW)@`k<M<s&6>`K\4BE`$/Cpi`
%CUl;(I,JLQ'U.Vb%EmOPI5^_PBTa0!Dk%S`(.3![=2K77`5B*AQB_PjGeQYMMR+.EG!)=q'F5mr@2?bTV-+4b`h>pQ`>nU;JsM.[
%dNjRB]G/K[Q&J?*b_YJfChm$+o,";4-$WuM9c%i4g+Aqr_P8OqV@2WnH95DGIKu:\?*hCcl,iJbRjHO;ZiUCAF2Ueme:Z1A/=Q@R
%c&$$q33F.]G03iW4FVpPXEEqH.@E?%j@!ahgl3*Gd*Z]u6++Lr%tlnUQAHKSQ$/<+n10,_0N;WkhZsS*Gcj)+^+<%Vkn%D_6]@-Y
%lO@F80p3DJS)&<!UJ)EI`j.p/`QSqH<*-29"iMTd>1Lj^0!)6Co9l*):>s<m`XA(]SmH'<7p:.*0\TnLT`er+l,/cLP.ZUu3CeMp
%[=r<NBq"om*K3'oEN^n60HTOGd;@5g*6%uER^K3t1JAF+nk^7@,?st3R%:K7LPX3hU_pF+\b<D7X28NN2RPsh_?`27@23#De_FJ9
%A;+[i$/,V4EW'Wa(Ki3!i@ViuZ'8Hd$a`Y``c:c`99*E8c>'-I7@<LI.$Ok:O@tKlU+Bn[1r3`4ERKu'o/)G*"30WML4!8u7?!$X
%\H^\e@8qhaD<$d!=(7mTf!"6%BIS=*d2I6R">4dI[>'<D?KSW_;jK0$I`*WjLPCa'?nH$oCFCU/*E7a$YRiMu=$b5;AquBtWot-t
%s#H$+lHIJa\O$W7O^iG(W$-Rg##-,51-@36C)kg.k2p>+>hK=+=[>Iq=?'n9g.AruU4B("%C4=dGW_6pC]p$V$,!bngu9l-TbSP:
%9LH;0mch)4Yq<eU1_UbiJ=)Er`[)?S,-#QGGHe3dW!'`d`[*XJ`'db0g_pq\[mknkh+$V40ES?B\m4%1QDY<erKYTd=,']$\u>s6
%G`nK&\Ik@lU]Go3F/5iYMAFrTIG95ZZ[4l..fGA]T4<PnKh&AF1Wn.tB<gUtC5,\iG$Kii`RR.$_0@d`mB*4khO':E#R[EJI?2?N
%V(N(n8;i1nMH42,f2K3\ZXgGk'>#N24G&8\;rBF>/;rGhos:sZ*8=k:d&jJ'Ek!Ac3V7q\(KY"$G#qZX1W73.m8j&r<JjQ"/]$PM
%Q_M=GBF.h0W+SMZ`"g"VSCBl3RdMkmjb!#]U]o=$k.D]-oT4f?FRr(T*]g3+kG?BJ0)B-3G2eFGk);.*!&*EH*"EZ;ktg`'.8"Rj
%?WsV(A@T1tm>DHCj7NLX/5W^@pMr5iPgVk?Ee,FaGS0Pg]<Ec&8`P?`bgoml1+cuirlp$&CZ&=J@b<,6.*1^X6rL+&a?(:nQ+4)$
%YN9_b?sIc7#Wn8Y\[EkMjEOm[=VZ^9[+XCEmb^VM)fO%#MI?tRKs<&[YF%km[&YD:j`&?6d=LK9:)i++$;R_e8i&79bO'%bguq6%
%N.:rG;p-_o\@os)h8@(fi'DpO3A3gZQ:K@HK;95"hN)5$&JKEc+5L3iM[X[=[QrioHJ5J4jjIHP-<X4_M;9,PQlYj"AA&s81.pP,
%:-(!9gBm`Me1/,NlVVJs?Y"=Q*I2-e]>\s(K+km#McS-_#(1dV=%1]`@E0l02dE7lAi.:@f?=^9)3&+mqRr-J%2L@^Js.WYn[L*]
%!Jk8E0hZd<hIXRj&5V7;8]5Xi:#VF4R'2d;,blG@!])3Oi7:G#98%B*$uA[>6VNj^I":=8;/a,(`I=B@p,o+-HMq=.6d[>RG^Yej
%#uhW!*h)dc<\0G838NoO8^eb8grT!3Fh=PSV>C,27mag&C9&44OR<Ad7Yf9p#Td-9VmPd2_<)^U3r9=?ZLEMr3dqMm\e`Yo<l]i>
%;$/h;\Ja8]2>Z-GI)H3[#h-&$KI%NU!AVj+4TpGHCBVjtah\?5E6Z.Q8&(Oqh:)oX"5;F&UPDYW@<@7*Voe9B!9n!8rr`43%3#PA
%6jG(>/BmK2"Om?h79l'(PY0L.")-hW8mI%6gLZ_][7D[%NjplcYbJg8JW[<p#t6[[pd0o3/),'[:W/50k$ZgMG7s48qV</W%5nt]
%4>P%7NXIrX$jQeN*];(;Si^,48rQ@3!%kZcGTlP;E62+t%4rH779+FqSD/.Kj0fO;_6c!ci;j8hN#V$`k4ldWTYb0d$kHtu%%#mU
%%L^u8M.7PD[Ml%]?1id'/_n?F5T*>m!K+g8]9=kBrQg:Nk"C=5S/)U%+\CSm^3Q4_GOD-D(GWCKZ1p=Hd7X"N;F0JG"c<lO/.\Pc
%/<f>>'j"&+c5ED5WPjkABPpGo#=WH5CnQ6"]>^O\gu$$6:-ah$QuRDQg#\0n6dl;u-:$<Y)*D0>E!]n>2EmV6/^uEgA`8bO<b^rY
%b94f05o#WMEt+p+Q(hP>;NW$Yeh+ME"As^N?%DHqem'0nR/eI@3M)dTXJVeqdc_C]:rDi<YAthf"[-oV7G&;#"AX8ffZ9hpF#b;%
%1#1)JF(!DY%Wd?O%:9,_o>J$#$jk2rSHFPcQ*F:-%%J_mSq>Y_NMT;4NpKp,bHLSg;COZ(&gth@jfu?[Ol?#XMGl6Kf#42<6%@7l
%M%UW5O>0d]eOC_BKA\Hd.Cn&Pp7P\e(86!I%<n*[H@+F`8,)*lk"HH$$I(o*iH,LiBH3!WGng0+9a<N5;>BdmY^&h+@%\1%pt_6\
%;?aY$>iOToDDl-AM@'Ro4=,P/,`CQWGf)+=Cubphm8<$23(HIA70FE';_osMTj(QGrD>k%g=#("eZu2k;9RIlV+0,_8b"PoDMh2C
%3>WV&1s67<`s>Q)WNdl.b*EuUT^!6F#=8Tb(m<li?nt">.EFhFLGhO,l)k@.jVErfe:;l91>HkAHX_CLJ<Lil2!A^J4:!?]!7jfY
%cPbSS9J!"4"5n1Nc)s$J2%rnZ"GITt..gScB6Kdca68"VTS>(*;C-'s.LN*?\h6K6r#Os`3!f\GQ:-T:0hc,pr]#G&HO\B;`'2FB
%U[9M`387(B*7;5&ZU<o0dD;:i3^)\j369/Gp4Bfdd@mE>^cHETJ"GY*fr;30(r5LsE4!"=Qc`.gM,'o',Y_:6_dC&U3ZaMrPqIs!
%6U-;M@<*d$#>i;0k_q,E$rAVkp=iWaGf76a"-CqC3M%?Ue\[h8iQ4P[)>6S5-<-]l=uO`oF==V2'ggg^W$8-"h?67P=2pb"<%.Ak
%_WQ/.!a\eBRM2BR/hr?2NMrZEG66/!pCCX^Gqm1R?PT`7/FY]n:,[qbGac&n#VkJ?n:%J^l4F`"eJL0d'4p?+/1T9:@YpPp9&\qg
%ZWHT6"iisRJZdi<6r7DI,1P<]4;_.fSRC%Bi5o*ZdI<lm6JJ,)Za%Cq,j/5sR0=ig1n^F$]^mN`KfUdWF0/g8OqUE9(nMkpE+a5i
%UOWag=6brigc@!?l&sjE@&7hh:*U00bbEl98(6ru13l<5^ej<*-eS1UF?0bH3Q`c4Kt#99(D^MjD`XYW<SZc>hg^Pmg_8eePWf13
%jdK-*&./bHTZMZ=Wi!/8'TPM;\BkG8GT6s8+f'oA2.0[Jj6cJAAnN6S-8,d??>'cb7Vbn\-kI_F-]4T$,:1u@EBINblS.4ZdA<NB
%PI[P^D,&WA&>m^B!:D#^R;nF34>YZDl8^n$"R!:b_'V#u@.4k+mq"=aKo9l4ggE*\p.XY>S4hX`-g\2g`cj1q)07o>+>ks1FNBEY
%nGJk-::7)>\/5mTqO$Un-CaiCm@MEsI>H!eRL"r3Bd&4D19lK"$:f^S.KDfpcHF1RSJ'rcF$/7(MEu+jV!sZ<(0e^Y5&(\0]W+t3
%TN,:$@S!-:jMoer`!#^A544fb3Z.M;'t7sk:%MnXaE3?B6R&:_X[=:r8_6"+=_*I2RfN\M$q6qC*.*g)jOf;_^UaX*V/Rl<J=!1_
%8f\>li,qI92ATpX5^0.5WoK)b&Ju'S-`NI]UANGMrB`Lcp6/seQp\Z:3K$l1.qp(?k!edV#Yr9_giK?g2]6#OGm'U*$YTeP'9]6N
%,E/d"jM%HAX9J#UF%[YX/Fh42CPZduF:j)FCGAZrlW`o,jANuhna:!dbVI%Ol0`U#4'G-#(opYpb6aG@jAWg^IDmK4G]==$h\gL%
%'U8mHT`COqVX'ZQG@N2`D?S#8NFBkbW$K]pLo?]Q#U^>"N0=T-aG[>4=N'#$Nk$+HL:^;C;<8Vhe?<Ik+[gq6cC)jQEKRA1@"J&\
%d/Jk1IE%f&50&TI,TUr+^kAMlF.XCEN-D.fW"n#P)<Poo4@4TCTW,Qn5id/?Xg!q(g<;)2"q,;l/L^%@*cu"G#3blo6(m?W6DO<k
%DP@JU-<AOYAJoA)js%Sf5`Mp58r&3.\uQ2Tn0+ZB9,(hl:++7m,(b2NSBOtCc3)osjQrM3KtKUWJa)m11sT4OjTR99+[FK;"k3g<
%<bH6:0RS^lL9n7akOO">YVa1(@Td<pP]2RJ#0u4%<3B.;[=Kb7f:Xq1csdCBnZ,S73B;'2_pAj>F=W0I$l._&6S<5SaSl2b15sVK
%BatPj6&V<j<J$pJS1uh2(<ikJ%j3Ja`?RN[+Ft1KAtf]$^)1D!PEE6*N.iY:J]qO&h<t9^j1"Bn6b/<H&hjGln[KX/PJC\:E(dI0
%$V.$M<5VAtm&G>knIW9G#+]A=T)_=dFOLddJu3t(J[-8*4WG9<g)Y*ij`Hi_`Qf@=Vja+b_9C:u-O#aoNHWHtA&'OY-3D-L3Z=T`
%E6u.[32XUR=bpZN(l[MN]lk:b@QE7UBODmQlBu,V?XZLIK`Fu2kfPZ96=\urD!:)NAP='e1nBk'U9^377R.-7\"-2a1OE3$;'./3
%G`O&/<cK:MTED97d2S(`?,;F5p+,B6R-p[C/$7O`3(%=+lnKiUcnW&?q8[5Z#3A2oO(*\3cFDg@N<MoAWl/$C4Cp'SB\)s">MjHU
%h.<OWr8m'#9"Gt@/ol<H%U,Bmk!D&`I%r91i,5%=ZuMNR_Z=Elbu(#knrnafk+n-i'\=S^Mm!nSq*k14VfHja00$a(TkJ<rlWB[7
%c1.SS2\eu8J=P&qHdpO'Y(^rAMo9[al,$i@o+Z"pEV)AN(H<jbM/j3IX6BnP1i\Pr#]!VrXRQd^>QoqB0a=C1G4,n]=Z"*r6M*9E
%U8Mfo;au]W/LEi?3k@gm<1kM(1:T.U"PM<0'"A#Q+hH0_7X96F</U2IqDP8:iE@!rN!P$,Q&a",htAX7,i'ad$AfX98Qjto^Tn"M
%T")d-p&pog<6t(E2q's8f5)M%ciMN,m[Srmd0bO4_Lj0$HJK2`NPJ2u(75RmZ`%SXgg?AIJ.e(`>7"%W*\/*o)0Um\]6s^Vfp*tt
%$s,[BVlj-['IgCs[g:Ea7V/kG=sVjr0f<X%BG#FsdB95Wfbg$kc76tsNhk&+\h-l*gnI6[EW)$.]4aPA%P:THd"ifpK]f+an0F\i
%/Q%N4^lmrgj(9&d0%WEYarTar:Jit=&td)Vm3GKUAUc\Dnfm?AUS'Rn`N<Ag+iSnQ+Zg33\b6:iM&RAs]MF;$jd%SG;gCV7b#?eO
%W\VP9@OT@SDN00m-ALkLX$aE5U2L-nEVk#<DX3C:6]706!V-?s0agf/O"kAQ2e;*j4-XNS,39!!$#!/=-j'R;k]Ze@W:<J#6UCT4
%)U*l\c'b?*eC[(k!ZbGigDdXFA)7VHg<4rA't''[bjho=oYp@o6=k(ZQ$D_0NakM5N^t*+:3U=O7B[f"+%ht-c>\X`L+o]I:P/qG
%2A^Rs$7OcbaQ_K8KK<'7ELp>>&,u0V@8UoDE&_rM;6\L=f+K)o=pEp.#`p:NjQKH.pS\A/qFS>1&&"FIKgd?^J'$`erJ-4I;;n&[
%Ajcel#lDi/a!5S\@%%soa8NiiO%8JKr.o6rWqLZE9/pq]2$FHZnFk).N2DRU4J9%g=dcN@/rCAu_TXoT1YB&W3/=#Ah$eSf>n<Gl
%!5;87\JT6s:,2GKd>a:Naoe,=JDt#_e<(QQo6"0:Cql,:UP/[qNg9.WmoA.iN\,<M5Sa*ndLXnBBnn/l,*RIS#H)q0EQ/Ja-+4@D
%UCE6a=lXF?+f;J".(&6)VIFPnKZkG(c,K"k@u/`NQH=R/09V-X"tLaLre08gVmmmg<(<-\'UPMOa_<@6QUA\BFHC!@-?,\D8r*`?
%ij;mR>6Ig.k$*TRM7Fjn-;@I<cH)`3:@Q)7S!3Sf]LNRI<R1u)ABKg(6nia$)K&',CQn7eD7^F7;*,$4ai(-:8t&F>k*QuJXs02h
%,H#PI&Pcsua>Fa.<L42<bu.5>'Lu4q=[N"NEa&se.e%tAd;j*uL^"F%b*4f/#KSH=i<9KGY,3B5lHtQNN^1Zl57Ti;VQI.KIhk`a
%imp=Hm/b8<1,f38_I/om991Wm$Tm#LisK+s$+Pou-U\;<VX+b]"ll<4.W1\cUg7>()4XL)d8G0WZ\E.<P6+Xd0b2,E6#Ok'Glb*.
%h,#(/,$L)3I,uoZnK)N./*Bd96-*+DQZsc65Jn8jeSGaY%P5O(9G1'=).!E6RnEcK'B@_*bA3$<hQIQG_U+3Y![,%l25cW7Ac<*^
%?[J$s[=YjG":/e-@>Eb`f/+rD>DNo$,N3&s!`rZaRbcGFl7'N#AF=W-S@3ugl\)hiY@IeL'CaA-en*eoQDL<`s)F_Q0:RGRa.5>%
%M]2!&`N$p*(6V]&iHW2_g#3O-Kl5+#-9jWN5jKgAZ76Mm8%E%.(jML);OsZ1[+'f4aQtTWH!9EkEAq*b7eJ&UNu;GJ`"O/qPAs:_
%>*Po>*3Tsq-s#@IA?j\^Q*O5V0$A5<TsA:HD$UHHZQB5=<[L(o>XkBM?V-/4@j/nG<(RmI4)Jpo:T2<VRPT!VBB8Yg%1@'4<PfRq
%>qPh/:9>NUmGs7,Imc,ajl)1e";Uh[O#j&rF7Y,8G,E?2[0dt@[<85WBP_.VW4/:J,L46=V#lBuc5aI,B]?<VgP*'n`dP,&qisKU
%`u)W.i7_aZ,LO>@3&EBB&`i#u6&pj@?+q%"[%`OQI$<&\gSb+irJ)j3:)0`9maDg*9lkW7[&;Wh>"8D%>8l!Jp0WGE41&eJUs].*
%c7Ps^gK=fP=J4\%JjX>ckB;s'$)t"#MK3aGb8&^9?4rYd#<LJYR)@"WG"0q^2HX&$("[jO9C+Xj[Jcf(fUgX0Y5@opD"M'S'1%D.
%iFesXgj-QA5g,*<hE<MJ>d7s$jL@FA`20Fg1WuBn/i#H],a&:K"d.rA$&-*s>KWVK\Tc$0B#7lAjWsr)eI5#=\+[o`KCGUkBsV$`
%/-GAqhN5Q/\*Ylb)D?Z=h+i3F[^h9QY$\Po$W7p^YaD%sV?KC02D`SpOA4`aAsY4-[N8%u0hW5B)IQX#;$hER'm.Srb``C:p8aTe
%FAHo5'!KKoQq]On,8]KO4+eGCbfhBiO:bf(mT_oAJHJCX9PF*WLC:N*iB8d$MD3g4`"r+jn-5[W4p\e'a&^n0A4^(*;6-FWM[QP(
%r'\OKjo`2KAl3`F`],bLa-RTNeC7HqAZh:R?3Z_9_K:GG0+ilW.cJ%-)ssl,]?6"1icL.QE2K?Q?WP=D&hS#h`DEX:7>bb:S<cMW
%$HKiN0U`Vc(j?4Q9:-'?QZHJjQFEPk,q5"q\2bn>a<]Qi_3/i6@H(PV"aD3RV.b,b.NU+S^a4(+">?g9Uh/O:L7Q/5g@JEl@cQU8
%-cR@lM;VK]MD-JT<01%MLnmRi(2MH+L*"tJZ(T!u;FT2aBckI=&p(N1_l[R[:X4"7DEsSn(uo^8Pl'7<;b>5F@gW`jGP=Vdns)mQ
%36u9]JYq8'ki>%1VmPAYj6SVY6%iA&mKq+bae7KN\$qkG"iW(:b/%\&"KkFl85bo:Xrl@9OlKEM1(ZG1p;S;H(o@DR;N+93p7taC
%)QjBHaCM;#X.)19!QpX`W*qnd/gZr.l'A@/:+]4Bd@mJ&\c(RB?.l%<n5h^NU1HrMWLOIickJrL#31QPOUEBZjp"bs<Dr.%2?Wb\
%1a,F3MoL`#mcMT@V3:ZWqUdB]`1WO_-<sDCojpnCKN+A]+cOZW7I':"*$&&/jN@!*$P@BTlX6.f%1GX`O`Td?N)7Mg/)(9m>:W-(
%$@M.WYsud[1l?']Z=hkoB:M(,Q6iDnXm#OK7s+6g(Gp'+EM%c4EDn`'_K`1.\tjju%4'c#k+oXsX\unlcOV'FD4SYu)T/rp[(]i)
%@[70.NuVdocgUiU%kjW_'8Q^\0:h;;X##uGKL^frJNISL+iR_WWAu';_BXXiG)A>4)99)[FDA!KTEX8,8U%1/ju*Nb;C#rdGY'bu
%!6Oa>@pomrOXY//^`s;uMR!0LAm'lA$LQda_0Gi_)J;>4Q>(hm-jVOM=%+sRm+5F0UMV%A\C-#Yn0M&>Jkc2Ym_t2*/u7%)V&=2f
%TM,3=\MuUc[><b'Kn8M+-;8&o-lcX%VQPSd-1!MI!Cel)F#9Wq=Q#-U>`qE,-aT0db$k6X'c]?AYb4^i+U;1/SBA@7!^n<E4:UT>
%+-f]%e#3u,OU@]RX'*-?&r?`F-Q*J;'9_&";1rNC"IRXJ,K)>U@j8pU<(31<9*uM^e;GV)j9uof>cKV5VZ7;tIJ^98dColJgDEal
%Q>$IB$uq`g94h(,QP,4P_tlfUFtcJmSr$#Tl\6B'I^jtRaALHjB'<nW*,1,FDVgr_RFr<+[!O`m5dtK'jo/XBKGcE-fB1^XS;';4
%3QC:(?#+E]MV$]ug@,ku'R2As/h?Wa4/>k%e%ooj)5jm^iVO$F2GOL=q/RZ1U*r>km88nXNYOZk<O6SZj#1WBg^o\-U@XSsV\iC=
%Qd-=S5rW6rQI:Gh;/W)O,")>/<H]sr[N<J3DX`-8'1"C8e*fd^1,f[G%O?Zl1,G8fM^(2PiCZ]2^X'Ai<HVAmHctQ'ATX73fC,m1
%Y/dPO@\brHTB(SBqGR\L7*O)@6oRL$Eusm^Ys;Ql7XXgH<LU#7RZZ_[RHWIdjG&Ghc$(0`ADT!\N_ciK8T2Uq*U5=!Mpm.QEI_(-
%OP*S*NKWMu&RG:Q9,(1p;12LR#\%J&gI'sT^Toe5KBu38F5\UXBmXO:[@M)fID9>64H7:g.BI9dUjlg](M!fkF_4B\6b9l]iY!6B
%\h31hQQ4u'?YS'^FeAM'?I9q65BJM"lKpp=0N<s)*>^Y^h0s@GNT(is2)5R=gV(aD1RR9I@Bt!umtLt1.E]=\TUKf\-ihO)GoRQ9
%CpchA>qfrhX"q#.(lbD;(jHc^_BMZ>3;"C`#./q#Z\'usGl3f>TAlok)eOMF21D0(&*pioje-T=7n=f&8[BWVP][T`VQ_$K3+F5T
%9OVCs&5@a6O<P\^?7K\*p@,k+[7f=pQ(5K'Q>$=%I1'Np!JMAf@'aWJ\q?bum<m\s%16LHEjHUk<pW^\qgmF?Hi;D5/GEe=0UI$K
%O:ec2i_boWZr%A4>[aQkJd!f[,q7$A^4q]?3I'(u]p$SIB=krT55W"eN22tPgj96P!B&oOKF4m0G1>S,hm3dh/mur#b)k%YJUPj,
%D"TN_7,oSq?(%tW@P`*hitHu[%S+jL`$N$j0**N8B09t`R-U/mD:qJsP2qC<.hl))L<2bGZ"-FG4KLX*is+7M63BWTZo?g!D>SRk
%S,L;8Qc4sb)hoXtbp\3MO_C(_ctu;bbtKHjoiRAinpO/$`#b/@/IfZJ).apQC@OWWFUu(<*9%jJYKh*Rc[b%<"['5Xo$m#p%ZHCQ
%h'_^W_T**l]`mMNE+80"\I[QWjcCMcT!(j'Hb5na)a;QS"hQQ"f%1MZ5m,"Ho4=MG`_bGSmt2CTD*1II)7dNZ;:ECB6d<IH;"Ln3
%C=kFa`c@SKjP#\\G'Bl."Bb4W]:Yhp1X4rVHQKsuYK->7.2Z^CgH*(p:oEg=Ese2]TU4W/HAD<M^>O(++0[B4LhO"qcOmq3\`J42
%ZVZ?#s#+LdjFqQ=&4!DGc\6gUH_E+f>j)Z(]u=\NF3bnlVpTk(*)h9Wj7ur$M<A866q8^_=1OFRRBOb=]uSo9Dtk19':'dA(0WnV
%$C/(YmMgi-1!m>j\Fi/%T%iLk_n.7VXhil`1"[Q(^!4nYNFPfQU\AVLo[5'^?#l"G69j5@OI@Od%E.:cWJhbl#HpAO7"V`]DUa0p
%ME]t00T*<RR'(F6qn<gXB-:ff1'/]KZ`sigl1TYH`:.#6)SjkJcPsnH=K-V4?+m`n/&QEUlpnU%1(LiQ,Bu.i:!h:F7P;/`R:&Rg
%&;j#b)7t?G24@m)BK@ij=U/M4<(T'7/fSc[:ju5t`?mg_<nil7:KcD#2(1juOZ?WXPmHZZ?3IF"&fcRr8KSaBbtKYshD,2oI'Tn"
%CiJV23P]3YfG#\eB_5Mrnp+#O,=^Tu[>[8-)CY`Kb`kT$_'QcVB>h:mb#ER$qWfu]*"Kt^3FiB)D42^f^[A4M6#D=T\A:Y$fgj-!
%OtEqA]NRu>0gp,LT_[-E>YE_UR&*>ujhHrIU.%ca'_qg2Jkg'0JL/>'j!^sISRIA'b1A>*<?(\JKJu;3[+no_nDbj5;?PO\dI^T_
%6adD*E2k=40>?SNa\PD<lFm7FZmGS^NWs`ooT^]hHBBSO$&)TYr3E6%I&&oK9hoh:(\Dph\fD?Q^_6ftV0ISI):;h&@G#D6P1jL@
%0>Z=8"5*]JLh.aIR3Y3+_-p8WN/Y:l<ekXf%PVYb`)n6We-u/FU\lrIR1!JaUa^ZKB/C;1?(%^Sppgq'+L#H:bHm0Vi%.Xh(a]g-
%&IVI@&;t!\Oe!)MU)qM##i,RH5%"GD:gf`-C1Oj\+ijsqJmNBIj;c-p0XkST%Fd8o'7NQb-uQ&An9SQ;<kWBHo??Q#k_p[(V/%-V
%=f*pn8>b,,o9+u?_c5<f^!ZM'n\9=K1"TpeP<+92NnGW*mj*F?p*dTm!A-ZL#6JpdP[E!$<=-L<#q.;gie69mXKN;0ZW*m@1+$?=
%1)eNVAL5XTUVljeZq5u'!J<D#E4H;6/E+H\Qs.@sX9f$$N"e^U8o0gR'K<4uoJdV5K=jrYG@6G7QLsUb&gnk0g?]<YOr/>!Y:$@4
%s263`+-:'4Xe\`j&6+3B_f*>a)PXt211leR="2UP'>ZRn91d/V2bS],$g1K#:Df86'&6U[A>gblef@+"-5t))c:DQV8P&V[Ca06`
%91Hka3&/L.>1VjUL4rO7FqP4lc)H!LRLl>a=;3<G*.n-dhREcW:5F$2a+,lXa/a:;Us]^$o#8,Y:4hHH#'(aEE[BqR)g(V`=.!*"
%&lfLcB%`A-CQr;:_n>V5bNtF&f"f6Z\Pke%/BT[araktDm+O71SFS'u>cK6[Ms&+XAPlWP%6o-QG_5.bW_?C?"J.S+4@GLjH%$2P
%@>h[<'m1)t7si;aQOXG<<Q5C,iN&0T,.Ji%iCNh1C56i(NdK5.ZpnZfG$'==^tEe]+BIc3<tXj2gaK<kaAiG6T#X*kAD*(cN:XG!
%9clZlH!TMJ2S`%-C\o5aG^?u1?*X>g%\%KW3gci69h-a=Ai=F[_%s/%%itrPHd$-W4&hpPXS`\l:%Qm2G(Q]E$25DtL&U0.I)<T<
%mu<+3CHdLjVBn"<Hcud%%jU:C-@"o"gmjRE520f@pjbQqPAX=TOtb>&Y0GIub6p1'YJ&*g'D[7Tc/sNPTgC9Rm!h_\l[@Q'_WS8G
%HtsGS,TcWZq#ff\d)iA,HL)32)n*Rm6O07_2TBE,lR(CH)g2G,NI4Nla)$A+kIMG[Le'sMfsh6gjlJ5+&j:&hee`%YgXe(4i8/Y3
%0IIX2,pKb#FV!?`DVN]!aEFtHh#@&PM$d>D&h0u(P<QIa01"\S'57Ad&Uh-c0-TR!AAZi+:@:/fM.fuO''69:PPVbsY62XOHB.d(
%ou+DKI2u(s6$e92BHMC=[:@VOT65OmXl`D_[k$i:G+3]Hghr`'As2J'p4)uiI+l(lnu*^G+\*?p1>Wq:nZ=;6Q3Dn`-I454#)0Mu
%THkG2%Ym=W9c3>2f41pJCf&'4J<T+O&3"4O[/q\kPJH*+,W9_k'9FII`/4s.=CmFYn[aq#09+-dQ<:!+"<?Z-a=W((%)bIJ2Qi^5
%,fD$pl-+ulH/]Dt:DEo+#O[pVki,GY\?.N_4^BO+:bWSQb+)&O0-D?nWZj.F=hNinBoV,"#rkh"#"_0(M[P.F:7ZU1c-bnLXB.5l
%BM0nZ14(C1RSfPSP.V)fj)S]%]0Hu`UtrC%B.n^-Udtn9O/P3hpo,_pf._haQp,"q7c`e76]B:SYTuYfA$3jG_sP4,@+#bjmR8:.
%Zc+.`Xl@F.<n`>',DCRt9!BS;1B#oQ&!:GUYS]$PF(ms..i[JRdDi[3TF'*aS@Rr31^o"ln+1`!oQ$.@-$`"llc.V4KM(N'e`"Cb
%W4+Tc?<.5IRaJsik%lC=-5WPsR%.3\.2t_j:!gA7LPIqj\XE`1FF;$/7N(nZ]3qkU/<ujQQdDC,8b8n&@G7Z8I]fntiSt-GhX6j+
%W'$.,j7R@Qs0et`nGFO`4t+:gkW0Z5ja)]H9T9,W03=>.mDh2h3]6bX4"D=NWVE*7.'-%nrL-5SiMPmn(`F\-_K)I!#o<eoj:"%u
%W8._b]nCr;[#]/m7W-15_jI-bRt=ol.Jmp7R].#P]rE(VMJ/it#Ft'5SPM%u,ham'<4_Fql^L;e<eTVUaEn-hTpK6i=;Tg/SuQ*#
%KB*t?XCRt(_!<nG:#\tSKKee?%!"n=;%Wd?CmuV;LG0f;a]kXf807KRbhS/I-#.tHc=UYpTJIlof>_:c%<.0(n<NNKMhI>3]&Ae`
%)\@TRiF.V*37NGQ'[;`jR<W>D@Ok;%:X%IAX/O21FcEDe:/h+d;,s#YQ/Y?<TnO\=?_+&EVhBf56?4M\=MaeXQjtS*]i7<_YPaH"
%1P&4s9l[F)T?Xl,%aNm'#p*&CWCH4bg)ionqJo=+f=4:t:^db0<V#B_j/IqXk\uEhjW^\D,l]cS6AINF_pb1J#Sg`<Rd;XECI3g$
%T&c80U6^IY"tEhK/VXXE&dkk9"HWm+:u[?BeTW8J@YNNt=pimj1B"C/5um+p7Ud+S;2KXGd0MYGN,OTpXP'O\7%U%hk_L-&ZdXUC
%m/8,WU_AY(EsTXh,&Q=7e/3s!kp(aW1!(rbiM=jC^ZKb$$UI18csKNpTP?gkK8;1sno[Wao0;Y,@I!%*/$`-eQmtI?EEYc(A:i[/
%M#sY?KDZi]omaog*>YkC5ji)&ZFnr).i]1#+p)@c,aM94-5:(S8n+WST.@:u>pF%q[?+Q,GR3%4Bfg-9$f%^6%.8Wl$9"BBTg4]=
%VR[*OM7:M5Vi&MJ1uk8;(9/V`*YMa2T>RHNrdWO("9[(cjA9L-*(]IU[nM_F#MC]G$(8'KZPiH;'&YTM^k`^s3dG0'fs+MEGueE2
%MI;%sEl>UEhS!ET`?uUN:EZ;BNTt2)h6qE[l+eAT/dOigDc(CXZ-Z$Iot1_u^##=+H:rM092^!);QAVY:KW>k1L.("K@:F;.ZjrF
%RAsYN`:#`9R*k4\egA>c'5nFM,K)tN*NRs]R!u>`Wj-"EgCBD:L1HVr(dMco,Fi>_+fL37Xp#$Y-;_nX].Fk>ASXPlBJ,!+kldL;
%LS9^\;UNfm<!8H.*Iu6>$JgHse*BlZO_h6X9Y0Q-&:qMj$.r8k9GeU%<sXa9OouC-Yb[D3fgbO61qWh\rPLr,"&+gD3*Eid#(d%a
%,FGX)YFXu/!%!8,0_H!g?GT('=Y5FOU/)bG]0m4Pa+4;jJP)Cn&=$f!`sl1B^X/T<WYE8#VH:S<!^%e>L)L(:qd!u8ac&X-?"3qu
%[_5Z[m6X:"L::,[XE$j&IFWG<-Q\&k!'W6O<)m,0YBbFbfWk.KeuZU"&CB#)0rB\DoV'Z[m97L9e8\1A*HN4$q3NXE\_"!B>oD\L
%K#'eWcaF_!"f"Y>"%]91H3*EP9Nl1]!0oIX]hP#cZ_T7<cXd:?--,?aX@=E*W;rC<Ir$r:PltVGEu\4QiFlN&@MFqmHI&;sjAV=A
%9PD@RB<LU#$Os:HBr_TUGD/\f/0c;uq;;jTe[Qqfb:8*DaiK).?!/\[>0'6E>$@a;7"?_gM3&fb(I5r6:jqNGL*Iq.b^$i</aDq&
%qmQB!]d-u/mm%0of6+B'dl@8Wh7<ml[BNm,O)'Vm)r[KO.h(j\J+\Cm/GEB6,e6tl^2(5*dqC>#\"5m6ZbpgHqrPgGic55@pc*aq
%)JoB:KIZo8n>Os[Ig8?g![8A?Ola"nfHn#g:2t`S`D9#D.Z$AFDTYt`#SK3(n`tiV,!P,_01"RQBNj1nJF\8g]]4&;>diB_1S.iO
%YeYkps3cY1Z.<H=[,Au4E'EWo\D!-(FHHJCJYBV2V6fP7iPoQ,U7!<H@A@`PUJS.,'T!`"!]a%mBNF0d\Ql6Z).8&=2%<e^H9>@6
%QEt#L&A.J"_^MTeg.bfVH6Hkt)@^(_jEV\(gj%8gl1c^op*98E_dtO_qr\,XO0k,>T-D^FU3\HqO1@-SiOulD[[*W)r/10O/T+rJ
%9<'>n">@4<j7P$PMQ%g(VF2G32jk^EEGpJAJ>^tM\RM_nE0oe^d=`s7=`2;=!(4@rG7`n0..JQa#<m]mZ2h?KMS7^9H2qbn*mg+H
%cc'=u$)#VIrhgjhKeE"2<W]Kc>IKu>q=PS`p$+0k@<K9Y\A<D>Apq/uO^AQ;Y@OX9.jSE>JB_mK;Ks=(3@;`^C1=(N#'&VM3+*Fe
%,'nq<k;Mu+G1FXgT:CUN'dm]_TYoNUR2;(^GWiN3RWuJA)BG!dq+!:#B_.Vk!ChBU1[XuC7Ru]arW+NtLS'(5I2qj>X:lW+%QFE4
%b71.'EUs^7;4'<?R"+[np=bN>nD#ciVVa[Wp)WEFhk;t&&4;U]H-\XGEbdh>\`ZB]*`(rE2fP#/"6kJ9a@Q7fpPnXd=T$r5d_!eP
%cH=T=5$lS$oA3!g,c4U<S-46AGq^TqZP%]LaHo/)Zmf+S_L5k`%)Lc3o])k.P!5^BO$US">jC_J7TtI%cC]^1>'L@T742]ND$Rqp
%<m(6U-;)JaK5E9.Vp@6ELR9?g9r*7_gFi*>-o?]?84,?OlK](QD5`c=Y#a+`kW32cNDAOl3Jhb2F?_`&NNB''NJ/d1nl4n/;/+ct
%k%Z&^=%l((HFf9"T11e=Km7!PdZ2ZJr48N'FTAs*;sp>UoXXBugf8X'EiWk=$/FF0QeUQN)Uqd@5R9t>NE_knZr.pQCA4*2kR"Rg
%f3re"pH!]JJJC3\*eT-(q"<u'a%rC)3N%L%NA/QSCIs.7n%YqjN4(&R=DOVeed'm%1\\jl8ed'Q^fr<!_DI78DJKn>Q,%h`%iBH0
%3*,p-m>^)_[>,a1p6rnmVE@-"]q^D]o=LOB=8aaI)Um(-6_<fG3,dH@[,^a@^[A"KBk`LnbO+h:Dlc3R)qZ2M8@l\X?LuOghOdo+
%&L^?uAaPQEblD*e8knU9@X<K4rQiqC$P?Abb<)Uf!E_1OCVa*_D8(9$9)Og@a)GU,F6n]8K-O@3)A"5u4Yl8$Qld$9>@^Y4eu/@q
%!%oGZ$R?j52hMMcod(td$Vbs@3K?jkG9SmPUiD>%$mIp3DR(J>=Kd'N::A>D<@ogcQqIe/37k`p+<bN7=2)0Y,u?[\-dK`aGVW8Z
%cmT<3j'r04Us[gY'(j[Fcrm5D'BD^]4d$gD_4^FqM%_0/)Z6aOhWVSGTeP.f_OAUU$;[mA7)AY]@I$F[q-"s\26Tn9QP8#!Rc]]R
%E8lk#C>dNpU%o=)&ZcEO5XP5tA%:L2/c!'gPEC0C/S$^m,/KTG/U+_TZnZE^Pe,eJ$eG`"iYS?frD5=B](/!>JKZas!+AmU>_Htr
%'M[`nciSoo"#kf'DXP46M&)FnmKZr/S,rDXkBUE!GXtYZZ="hnJ3o.m#&@AY\SXr.+r]rC4#(E!/V%r\Yd,#P4$)<PXAJ'E8kOpf
%cnMDs<X`kff01^::+-Ssr8iTT#N]6hDO)P>_l=it#/MG#HpI+d4c'95gj"P0A3j&SNjtj_'Wq^OA=3<J&MubDUTs)B8-T0R2.9Hg
%^I0c<n:&oD%!Tk:0bP#K8gCca8\jI7l/H-BNY3-uY4qAu&kYOAa8jE)]L*'RR*=fBl0Y)e:7Ud.96(O)KABA+@Z'0c$`3Q[Z8tKe
%Gtln``5'UNfM+Y<nqd+hLBcd%kjt"*e9*TV;@uD$4ShW?m"?Z9:/E*kXBfi]Q6`E`<W6$1H7L:e8Y&D\U_N&tW3]&uJqQknT9u,^
%np0#!qf8KOBaBET43t^'&C-K_cFEJ1>4==R&F?C?8;A]fL3_5b-"n@V0X7c^)<Ql_!;3rRSJ7iuEbld(`F^KMa=_lrE>5\.&Apoi
%%=(B\fN:_J,;L>e7$n9i4)-f1[cjEW.r:4F\A>50];@_(]2=;G?B=3gYJMog+<KEG[6rD6BMn5k'm[VXdq0_L?=aV!H=E03hQl#s
%R`(9X-kXBDgdeMf`U&PMi&^ne98(GOE^ali<US5a9NU6=c?%;RY6X,r<e>F/j<!]m&C.6(5L=b="j^S6n63BQ)M6Il5%eBMdrfMp
%iHOP2(Wcg?alL%_DAYT.>5?IUWV\.4\"[nI768ZEmblXB?0(G#F5J(CLI='^em=U8/Sna^X'*)mjN'VVaeEl+CsRfHFU:PT<b7((
%`)=hur?sUdg`?<q-[VZh4A*,$lU-9-k9,\*kFrf30A?'_gO*/,F!8tu-.EOkaYG?,loT\>cB+;K8,n[(Rg`1^1C%BhSt6PGs5r(n
%r9`6gr;3NB"eJahP/QA@Y=^>!i>&H1?=@JXlNj>OPaVfsN`].jX.cSCk4?T$i(#^*]`fW?ZUJH6G;*rTo[$c!n`n>n@5hq0O/!'j
%(-<ie3;noA97;T)=7m:gbh=?28:stS5&RTIG#boijMe&]?4XK2##og<4pL3<lWRP8/jK\AWe9Q&,9D8T<c?YYe43VOj?hhDd]'8"
%jUD@`$+?ilbR?e.L7nKD3^!p9>#paqo9DC^2:E;NHh6%_a6W8?@Equi_*],Edr!AA_PCkf<)DN$[*2?uC$In"I)?t`J8Z@m?'4b!
%DF_SRH`.iIG)!-2T-?*kJfCd^O81eWYVjoH)4+pmWUGo"6h5$s!1=iZDgnP1bVldLE2mdW*uJl*2g.sjK(mF?7ICnt.R2K&o^QM$
%j-LMT>s;)/M&SN+hsbOH/op^LWTT>/j70M)p.p^&7e6=a>2Y#el3^[VFlkC8BEt_`[S+!8j/R:'$nbU[IEhL>OZ];/$eJh$D?m@W
%\ft4"T)/D13>udpM;)F%9I'lR.ToIT=U50#o'B:RA+cWn#K!9PJd4W+Lk1CFPI/b"N9e^Slio7h4!%bHM0L_l\AJs:54eb2;H#8M
%'?s+EIA#;J!m2EV4]5-LlJ5)V(/RaRMHm#8"<:lMGoa1Z+Es3<DHN=h*kYmp?Ah7+*&&I^XsRP(n\#k;DnM6,c7>d$p*:%k]oZ4Q
%mQH0cQ!h.\oa_PseS1Tc"^Dmoj\BjpqfdPf]AJ,:jWAtsr:7a$5CWV.kI822p(-p_pVZakj6qHsch3?Kq!gT+5QCQ&fC-JhJFEL1
%o:NbpgXjb9I!kbdgY_qnkKj2*jmDZ#5Q:;uk?kt$p[t/]rdFV<Q_2!@H2IEPIel8Oph5*Fh04ADQ[el!DuLhh[Ilf~>
%AI9_PrivateDataEnd
